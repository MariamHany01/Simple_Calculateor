
calculator_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000036c6  0000375a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800084  00800084  0000377e  2**0
                  ALLOC
  3 .stab         0000273c  00000000  00000000  00003780  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000df9  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a848  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 void perform_calculation (sint16 *op1,uint8 *operation,sint16 * op2);
 #define SIZE_OPERAND   5
 #define SIZE_OPERATOR  3

int main ()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c7 55       	subi	r28, 0x57	; 87
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

	 LCD_init();
     b60:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_init>
	 LCD_displayStringRowColumn(0,3,"Welcome to");
     b64:	20 e6       	ldi	r18, 0x60	; 96
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <LCD_displayStringRowColumn>
   	 LCD_displayStringRowColumn(1 ,0, "Edges Calculator");
     b72:	2b e6       	ldi	r18, 0x6B	; 107
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	a9 01       	movw	r20, r18
     b7c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <LCD_displayStringRowColumn>
     b80:	fe 01       	movw	r30, r28
     b82:	ef 5a       	subi	r30, 0xAF	; 175
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	aa ef       	ldi	r26, 0xFA	; 250
     b8c:	b3 e4       	ldi	r27, 0x43	; 67
     b8e:	80 83       	st	Z, r24
     b90:	91 83       	std	Z+1, r25	; 0x01
     b92:	a2 83       	std	Z+2, r26	; 0x02
     b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b96:	8e 01       	movw	r16, r28
     b98:	03 5b       	subi	r16, 0xB3	; 179
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	fe 01       	movw	r30, r28
     b9e:	ef 5a       	subi	r30, 0xAF	; 175
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	60 81       	ld	r22, Z
     ba4:	71 81       	ldd	r23, Z+1	; 0x01
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a e7       	ldi	r20, 0x7A	; 122
     bb0:	55 e4       	ldi	r21, 0x45	; 69
     bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	f8 01       	movw	r30, r16
     bbc:	80 83       	st	Z, r24
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	a2 83       	std	Z+2, r26	; 0x02
     bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bc4:	fe 01       	movw	r30, r28
     bc6:	e3 5b       	subi	r30, 0xB3	; 179
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	93 81       	ldd	r25, Z+3	; 0x03
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e8       	ldi	r20, 0x80	; 128
     bd8:	5f e3       	ldi	r21, 0x3F	; 63
     bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bde:	88 23       	and	r24, r24
     be0:	44 f4       	brge	.+16     	; 0xbf2 <main+0xac>
		__ticks = 1;
     be2:	fe 01       	movw	r30, r28
     be4:	e5 5b       	subi	r30, 0xB5	; 181
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
     bf0:	64 c0       	rjmp	.+200    	; 0xcba <main+0x174>
	else if (__tmp > 65535)
     bf2:	fe 01       	movw	r30, r28
     bf4:	e3 5b       	subi	r30, 0xB3	; 179
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	82 81       	ldd	r24, Z+2	; 0x02
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	57 e4       	ldi	r21, 0x47	; 71
     c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <main+0xcc>
     c10:	43 c0       	rjmp	.+134    	; 0xc98 <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	fe 01       	movw	r30, r28
     c14:	ef 5a       	subi	r30, 0xAF	; 175
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e2       	ldi	r20, 0x20	; 32
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8e 01       	movw	r16, r28
     c32:	05 5b       	subi	r16, 0xB5	; 181
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	f8 01       	movw	r30, r16
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24
     c48:	1f c0       	rjmp	.+62     	; 0xc88 <main+0x142>
     c4a:	fe 01       	movw	r30, r28
     c4c:	e7 5b       	subi	r30, 0xB7	; 183
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	80 e9       	ldi	r24, 0x90	; 144
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c58:	fe 01       	movw	r30, r28
     c5a:	e7 5b       	subi	r30, 0xB7	; 183
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <main+0x11c>
     c66:	fe 01       	movw	r30, r28
     c68:	e7 5b       	subi	r30, 0xB7	; 183
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c70:	de 01       	movw	r26, r28
     c72:	a5 5b       	subi	r26, 0xB5	; 181
     c74:	bf 4f       	sbci	r27, 0xFF	; 255
     c76:	fe 01       	movw	r30, r28
     c78:	e5 5b       	subi	r30, 0xB5	; 181
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	9c 93       	st	X, r25
     c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	fe 01       	movw	r30, r28
     c8a:	e5 5b       	subi	r30, 0xB5	; 181
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	d1 f6       	brne	.-76     	; 0xc4a <main+0x104>
     c96:	27 c0       	rjmp	.+78     	; 0xce6 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c98:	8e 01       	movw	r16, r28
     c9a:	05 5b       	subi	r16, 0xB5	; 181
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	fe 01       	movw	r30, r28
     ca0:	e3 5b       	subi	r30, 0xB3	; 179
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	f8 01       	movw	r30, r16
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
     cba:	de 01       	movw	r26, r28
     cbc:	a9 5b       	subi	r26, 0xB9	; 185
     cbe:	bf 4f       	sbci	r27, 0xFF	; 255
     cc0:	fe 01       	movw	r30, r28
     cc2:	e5 5b       	subi	r30, 0xB5	; 181
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	8d 93       	st	X+, r24
     ccc:	9c 93       	st	X, r25
     cce:	fe 01       	movw	r30, r28
     cd0:	e9 5b       	subi	r30, 0xB9	; 185
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <main+0x192>
     cdc:	fe 01       	movw	r30, r28
     cde:	e9 5b       	subi	r30, 0xB9	; 185
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
   	 _delay_ms(500);
   	 LCD_clearScreen();
     ce6:	0e 94 a5 1a 	call	0x354a	; 0x354a <LCD_clearScreen>

   	/*variable to count number of digits of both operands */
	 uint8 i=0;
     cea:	fe 01       	movw	r30, r28
     cec:	e9 5a       	subi	r30, 0xA9	; 169
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	10 82       	st	Z, r1
	 /* variable to know if the number is +ve or -Ve by storing in it the polarity */
	 sint8 sign=1;
     cf2:	fe 01       	movw	r30, r28
     cf4:	ea 5a       	subi	r30, 0xAA	; 170
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 83       	st	Z, r24

	/*store in it the pressed key */
	 uint8 key=0;
     cfc:	fe 01       	movw	r30, r28
     cfe:	eb 5a       	subi	r30, 0xAB	; 171
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	10 82       	st	Z, r1
     d04:	a5 c1       	rjmp	.+842    	; 0x1050 <main+0x50a>

	while(i<SIZE_OPERAND){
		/* variable to store in the pressed key ,char as we will take digit by digit
		 and unsigned as the digits are unsigned*/
		key= KEYPAD_getPressedKey(); /* take the pressed key */
     d06:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <KEYPAD_getPressedKey>
     d0a:	fe 01       	movw	r30, r28
     d0c:	eb 5a       	subi	r30, 0xAB	; 171
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 83       	st	Z, r24

		/* to store the sign of first digit the input is +/- */
		if ((i== 0)&&((key=='-')||(key=='+'))){
     d12:	fe 01       	movw	r30, r28
     d14:	e9 5a       	subi	r30, 0xA9	; 169
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	88 23       	and	r24, r24
     d1c:	11 f5       	brne	.+68     	; 0xd62 <main+0x21c>
     d1e:	fe 01       	movw	r30, r28
     d20:	eb 5a       	subi	r30, 0xAB	; 171
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 81       	ld	r24, Z
     d26:	8d 32       	cpi	r24, 0x2D	; 45
     d28:	31 f0       	breq	.+12     	; 0xd36 <main+0x1f0>
     d2a:	fe 01       	movw	r30, r28
     d2c:	eb 5a       	subi	r30, 0xAB	; 171
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 81       	ld	r24, Z
     d32:	8b 32       	cpi	r24, 0x2B	; 43
     d34:	b1 f4       	brne	.+44     	; 0xd62 <main+0x21c>
			if (key=='-')
     d36:	fe 01       	movw	r30, r28
     d38:	eb 5a       	subi	r30, 0xAB	; 171
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	8d 32       	cpi	r24, 0x2D	; 45
     d40:	49 f4       	brne	.+18     	; 0xd54 <main+0x20e>
				sign *=-1;
     d42:	de 01       	movw	r26, r28
     d44:	aa 5a       	subi	r26, 0xAA	; 170
     d46:	bf 4f       	sbci	r27, 0xFF	; 255
     d48:	fe 01       	movw	r30, r28
     d4a:	ea 5a       	subi	r30, 0xAA	; 170
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	81 95       	neg	r24
     d52:	8c 93       	st	X, r24
				LCD_sendCharacter(key);
     d54:	fe 01       	movw	r30, r28
     d56:	eb 5a       	subi	r30, 0xAB	; 171
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 81       	ld	r24, Z
     d5c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>
     d60:	05 c1       	rjmp	.+522    	; 0xf6c <main+0x426>

				}

		/* if equal operand is pressed and there is a number stored in operand then raise
		 a flag and return to the main */
		 else if((key == '=' )&& (i>0)){
     d62:	fe 01       	movw	r30, r28
     d64:	eb 5a       	subi	r30, 0xAB	; 171
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	80 81       	ld	r24, Z
     d6a:	8d 33       	cpi	r24, 0x3D	; 61
     d6c:	99 f4       	brne	.+38     	; 0xd94 <main+0x24e>
     d6e:	fe 01       	movw	r30, r28
     d70:	e9 5a       	subi	r30, 0xA9	; 169
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	69 f0       	breq	.+26     	; 0xd94 <main+0x24e>
			LCD_sendCharacter('=');
     d7a:	8d e3       	ldi	r24, 0x3D	; 61
     d7c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>

			perform_calculation (&operand1,&operator,&operand2);
     d80:	84 e8       	ldi	r24, 0x84	; 132
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	28 e8       	ldi	r18, 0x88	; 136
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	46 e8       	ldi	r20, 0x86	; 134
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	b9 01       	movw	r22, r18
     d8e:	0e 94 88 0a 	call	0x1510	; 0x1510 <perform_calculation>
     d92:	ec c0       	rjmp	.+472    	; 0xf6c <main+0x426>

			}

		/* if the pressed is not a digit */
		else if((key =='%')||(key =='*')||(key=='-')||(key=='+') ){
     d94:	fe 01       	movw	r30, r28
     d96:	eb 5a       	subi	r30, 0xAB	; 171
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 81       	ld	r24, Z
     d9c:	85 32       	cpi	r24, 0x25	; 37
     d9e:	99 f0       	breq	.+38     	; 0xdc6 <main+0x280>
     da0:	fe 01       	movw	r30, r28
     da2:	eb 5a       	subi	r30, 0xAB	; 171
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 81       	ld	r24, Z
     da8:	8a 32       	cpi	r24, 0x2A	; 42
     daa:	69 f0       	breq	.+26     	; 0xdc6 <main+0x280>
     dac:	fe 01       	movw	r30, r28
     dae:	eb 5a       	subi	r30, 0xAB	; 171
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	80 81       	ld	r24, Z
     db4:	8d 32       	cpi	r24, 0x2D	; 45
     db6:	39 f0       	breq	.+14     	; 0xdc6 <main+0x280>
     db8:	fe 01       	movw	r30, r28
     dba:	eb 5a       	subi	r30, 0xAB	; 171
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	8b 32       	cpi	r24, 0x2B	; 43
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <main+0x280>
     dc4:	99 c0       	rjmp	.+306    	; 0xef8 <main+0x3b2>

		/* in this case the user only entered a bunch of operands without any number */
			if(i==0){
     dc6:	fe 01       	movw	r30, r28
     dc8:	e9 5a       	subi	r30, 0xA9	; 169
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	88 23       	and	r24, r24
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <main+0x28e>
     dd2:	cc c0       	rjmp	.+408    	; 0xf6c <main+0x426>
                /*do nothing*/
			}

		    else {
				operator=key;//operator is entered
     dd4:	fe 01       	movw	r30, r28
     dd6:	eb 5a       	subi	r30, 0xAB	; 171
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	80 93 88 00 	sts	0x0088, r24
				 LCD_sendCharacter(key);
     de0:	fe 01       	movw	r30, r28
     de2:	eb 5a       	subi	r30, 0xAB	; 171
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>
     dec:	fe 01       	movw	r30, r28
     dee:	ed 5b       	subi	r30, 0xBD	; 189
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	aa ef       	ldi	r26, 0xFA	; 250
     df8:	b3 e4       	ldi	r27, 0x43	; 67
     dfa:	80 83       	st	Z, r24
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	a2 83       	std	Z+2, r26	; 0x02
     e00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e02:	8e 01       	movw	r16, r28
     e04:	01 5c       	subi	r16, 0xC1	; 193
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	fe 01       	movw	r30, r28
     e0a:	ed 5b       	subi	r30, 0xBD	; 189
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	4a e7       	ldi	r20, 0x7A	; 122
     e1c:	55 e4       	ldi	r21, 0x45	; 69
     e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	f8 01       	movw	r30, r16
     e28:	80 83       	st	Z, r24
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	a2 83       	std	Z+2, r26	; 0x02
     e2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e30:	fe 01       	movw	r30, r28
     e32:	ff 96       	adiw	r30, 0x3f	; 63
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e8       	ldi	r20, 0x80	; 128
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e48:	88 23       	and	r24, r24
     e4a:	2c f4       	brge	.+10     	; 0xe56 <main+0x310>
		__ticks = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9e af       	std	Y+62, r25	; 0x3e
     e52:	8d af       	std	Y+61, r24	; 0x3d
     e54:	46 c0       	rjmp	.+140    	; 0xee2 <main+0x39c>
	else if (__tmp > 65535)
     e56:	fe 01       	movw	r30, r28
     e58:	ff 96       	adiw	r30, 0x3f	; 63
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	64 f5       	brge	.+88     	; 0xeca <main+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	fe 01       	movw	r30, r28
     e74:	ed 5b       	subi	r30, 0xBD	; 189
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e2       	ldi	r20, 0x20	; 32
     e86:	51 e4       	ldi	r21, 0x41	; 65
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9e af       	std	Y+62, r25	; 0x3e
     e9e:	8d af       	std	Y+61, r24	; 0x3d
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <main+0x37a>
     ea2:	80 e9       	ldi	r24, 0x90	; 144
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	9c af       	std	Y+60, r25	; 0x3c
     ea8:	8b af       	std	Y+59, r24	; 0x3b
     eaa:	8b ad       	ldd	r24, Y+59	; 0x3b
     eac:	9c ad       	ldd	r25, Y+60	; 0x3c
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <main+0x368>
     eb2:	9c af       	std	Y+60, r25	; 0x3c
     eb4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     eb8:	9e ad       	ldd	r25, Y+62	; 0x3e
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	9e af       	std	Y+62, r25	; 0x3e
     ebe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec0:	8d ad       	ldd	r24, Y+61	; 0x3d
     ec2:	9e ad       	ldd	r25, Y+62	; 0x3e
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f7       	brne	.-38     	; 0xea2 <main+0x35c>
     ec8:	ca c0       	rjmp	.+404    	; 0x105e <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eca:	fe 01       	movw	r30, r28
     ecc:	ff 96       	adiw	r30, 0x3f	; 63
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9e af       	std	Y+62, r25	; 0x3e
     ee0:	8d af       	std	Y+61, r24	; 0x3d
     ee2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ee4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ee6:	9a af       	std	Y+58, r25	; 0x3a
     ee8:	89 af       	std	Y+57, r24	; 0x39
     eea:	89 ad       	ldd	r24, Y+57	; 0x39
     eec:	9a ad       	ldd	r25, Y+58	; 0x3a
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <main+0x3a8>
     ef2:	9a af       	std	Y+58, r25	; 0x3a
     ef4:	89 af       	std	Y+57, r24	; 0x39
     ef6:	b3 c0       	rjmp	.+358    	; 0x105e <main+0x518>
			    }
			}
			/* if equal operand is pressed and there is a number stored in operand then raise
			 a flag and return to the main */
		else {
			operand1 =((operand1*10)+key)*sign;
     ef8:	80 91 84 00 	lds	r24, 0x0084
     efc:	90 91 85 00 	lds	r25, 0x0085
     f00:	9c 01       	movw	r18, r24
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	c9 01       	movw	r24, r18
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	28 0f       	add	r18, r24
     f12:	39 1f       	adc	r19, r25
     f14:	fe 01       	movw	r30, r28
     f16:	eb 5a       	subi	r30, 0xAB	; 171
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	28 0f       	add	r18, r24
     f22:	39 1f       	adc	r19, r25
     f24:	fe 01       	movw	r30, r28
     f26:	ea 5a       	subi	r30, 0xAA	; 170
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 81       	ld	r24, Z
     f2c:	99 27       	eor	r25, r25
     f2e:	87 fd       	sbrc	r24, 7
     f30:	90 95       	com	r25
     f32:	ac 01       	movw	r20, r24
     f34:	24 9f       	mul	r18, r20
     f36:	c0 01       	movw	r24, r0
     f38:	25 9f       	mul	r18, r21
     f3a:	90 0d       	add	r25, r0
     f3c:	34 9f       	mul	r19, r20
     f3e:	90 0d       	add	r25, r0
     f40:	11 24       	eor	r1, r1
     f42:	90 93 85 00 	sts	0x0085, r25
     f46:	80 93 84 00 	sts	0x0084, r24
			/*if +ve then display it as integer */
			LCD_integerToString(key);
     f4a:	fe 01       	movw	r30, r28
     f4c:	eb 5a       	subi	r30, 0xAB	; 171
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_integerToString>

			 i++;
     f5a:	de 01       	movw	r26, r28
     f5c:	a9 5a       	subi	r26, 0xA9	; 169
     f5e:	bf 4f       	sbci	r27, 0xFF	; 255
     f60:	fe 01       	movw	r30, r28
     f62:	e9 5a       	subi	r30, 0xA9	; 169
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	aa ef       	ldi	r26, 0xFA	; 250
     f72:	b3 e4       	ldi	r27, 0x43	; 67
     f74:	8d ab       	std	Y+53, r24	; 0x35
     f76:	9e ab       	std	Y+54, r25	; 0x36
     f78:	af ab       	std	Y+55, r26	; 0x37
     f7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	6d a9       	ldd	r22, Y+53	; 0x35
     f7e:	7e a9       	ldd	r23, Y+54	; 0x36
     f80:	8f a9       	ldd	r24, Y+55	; 0x37
     f82:	98 ad       	ldd	r25, Y+56	; 0x38
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a e7       	ldi	r20, 0x7A	; 122
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	89 ab       	std	Y+49, r24	; 0x31
     f96:	9a ab       	std	Y+50, r25	; 0x32
     f98:	ab ab       	std	Y+51, r26	; 0x33
     f9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f9c:	69 a9       	ldd	r22, Y+49	; 0x31
     f9e:	7a a9       	ldd	r23, Y+50	; 0x32
     fa0:	8b a9       	ldd	r24, Y+51	; 0x33
     fa2:	9c a9       	ldd	r25, Y+52	; 0x34
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <main+0x478>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	98 ab       	std	Y+48, r25	; 0x30
     fba:	8f a7       	std	Y+47, r24	; 0x2f
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <main+0x4f6>
	else if (__tmp > 65535)
     fbe:	69 a9       	ldd	r22, Y+49	; 0x31
     fc0:	7a a9       	ldd	r23, Y+50	; 0x32
     fc2:	8b a9       	ldd	r24, Y+51	; 0x33
     fc4:	9c a9       	ldd	r25, Y+52	; 0x34
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	6d a9       	ldd	r22, Y+53	; 0x35
     fd8:	7e a9       	ldd	r23, Y+54	; 0x36
     fda:	8f a9       	ldd	r24, Y+55	; 0x37
     fdc:	98 ad       	ldd	r25, Y+56	; 0x38
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	98 ab       	std	Y+48, r25	; 0x30
     ffc:	8f a7       	std	Y+47, r24	; 0x2f
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <main+0x4d8>
    1000:	80 e9       	ldi	r24, 0x90	; 144
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9e a7       	std	Y+46, r25	; 0x2e
    1006:	8d a7       	std	Y+45, r24	; 0x2d
    1008:	8d a5       	ldd	r24, Y+45	; 0x2d
    100a:	9e a5       	ldd	r25, Y+46	; 0x2e
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <main+0x4c6>
    1010:	9e a7       	std	Y+46, r25	; 0x2e
    1012:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8f a5       	ldd	r24, Y+47	; 0x2f
    1016:	98 a9       	ldd	r25, Y+48	; 0x30
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	98 ab       	std	Y+48, r25	; 0x30
    101c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1020:	98 a9       	ldd	r25, Y+48	; 0x30
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <main+0x4ba>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <main+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	69 a9       	ldd	r22, Y+49	; 0x31
    102a:	7a a9       	ldd	r23, Y+50	; 0x32
    102c:	8b a9       	ldd	r24, Y+51	; 0x33
    102e:	9c a9       	ldd	r25, Y+52	; 0x34
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	98 ab       	std	Y+48, r25	; 0x30
    103a:	8f a7       	std	Y+47, r24	; 0x2f
    103c:	8f a5       	ldd	r24, Y+47	; 0x2f
    103e:	98 a9       	ldd	r25, Y+48	; 0x30
    1040:	9c a7       	std	Y+44, r25	; 0x2c
    1042:	8b a7       	std	Y+43, r24	; 0x2b
    1044:	8b a5       	ldd	r24, Y+43	; 0x2b
    1046:	9c a5       	ldd	r25, Y+44	; 0x2c
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <main+0x502>
    104c:	9c a7       	std	Y+44, r25	; 0x2c
    104e:	8b a7       	std	Y+43, r24	; 0x2b
	 sint8 sign=1;

	/*store in it the pressed key */
	 uint8 key=0;

	while(i<SIZE_OPERAND){
    1050:	fe 01       	movw	r30, r28
    1052:	e9 5a       	subi	r30, 0xA9	; 169
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	08 f4       	brcc	.+2      	; 0x105e <main+0x518>
    105c:	54 ce       	rjmp	.-856    	; 0xd06 <main+0x1c0>
	}

   	 while(1){
label:
   		 /*initialize them from the begaining */
   		i=0;
    105e:	fe 01       	movw	r30, r28
    1060:	e9 5a       	subi	r30, 0xA9	; 169
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	10 82       	st	Z, r1
   		key=0;
    1066:	fe 01       	movw	r30, r28
    1068:	eb 5a       	subi	r30, 0xAB	; 171
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	10 82       	st	Z, r1
   		sign=1;
    106e:	fe 01       	movw	r30, r28
    1070:	ea 5a       	subi	r30, 0xAA	; 170
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 83       	st	Z, r24

   		if(operator==0){
    1078:	80 91 88 00 	lds	r24, 0x0088
    107c:	88 23       	and	r24, r24
    107e:	09 f0       	breq	.+2      	; 0x1082 <main+0x53c>
    1080:	c1 c1       	rjmp	.+898    	; 0x1404 <main+0x8be>
   			while(1){
   				if(((key=='+')||(key=='-')||(key=='%')||(key=='*'))){
    1082:	fe 01       	movw	r30, r28
    1084:	eb 5a       	subi	r30, 0xAB	; 171
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 81       	ld	r24, Z
    108a:	8b 32       	cpi	r24, 0x2B	; 43
    108c:	99 f0       	breq	.+38     	; 0x10b4 <main+0x56e>
    108e:	fe 01       	movw	r30, r28
    1090:	eb 5a       	subi	r30, 0xAB	; 171
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 81       	ld	r24, Z
    1096:	8d 32       	cpi	r24, 0x2D	; 45
    1098:	69 f0       	breq	.+26     	; 0x10b4 <main+0x56e>
    109a:	fe 01       	movw	r30, r28
    109c:	eb 5a       	subi	r30, 0xAB	; 171
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	85 32       	cpi	r24, 0x25	; 37
    10a4:	39 f0       	breq	.+14     	; 0x10b4 <main+0x56e>
    10a6:	fe 01       	movw	r30, r28
    10a8:	eb 5a       	subi	r30, 0xAB	; 171
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	8a 32       	cpi	r24, 0x2A	; 42
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <main+0x56e>
    10b2:	7f c0       	rjmp	.+254    	; 0x11b2 <main+0x66c>
   					operator=key;
    10b4:	fe 01       	movw	r30, r28
    10b6:	eb 5a       	subi	r30, 0xAB	; 171
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	80 93 88 00 	sts	0x0088, r24
   					LCD_sendCharacter(key);
    10c0:	fe 01       	movw	r30, r28
    10c2:	eb 5a       	subi	r30, 0xAB	; 171
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	aa ef       	ldi	r26, 0xFA	; 250
    10d2:	b3 e4       	ldi	r27, 0x43	; 67
    10d4:	8f a3       	std	Y+39, r24	; 0x27
    10d6:	98 a7       	std	Y+40, r25	; 0x28
    10d8:	a9 a7       	std	Y+41, r26	; 0x29
    10da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10dc:	6f a1       	ldd	r22, Y+39	; 0x27
    10de:	78 a5       	ldd	r23, Y+40	; 0x28
    10e0:	89 a5       	ldd	r24, Y+41	; 0x29
    10e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	4a e7       	ldi	r20, 0x7A	; 122
    10ea:	55 e4       	ldi	r21, 0x45	; 69
    10ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8b a3       	std	Y+35, r24	; 0x23
    10f6:	9c a3       	std	Y+36, r25	; 0x24
    10f8:	ad a3       	std	Y+37, r26	; 0x25
    10fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10fc:	6b a1       	ldd	r22, Y+35	; 0x23
    10fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1100:	8d a1       	ldd	r24, Y+37	; 0x25
    1102:	9e a1       	ldd	r25, Y+38	; 0x26
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	2c f4       	brge	.+10     	; 0x111e <main+0x5d8>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9a a3       	std	Y+34, r25	; 0x22
    111a:	89 a3       	std	Y+33, r24	; 0x21
    111c:	3f c0       	rjmp	.+126    	; 0x119c <main+0x656>
	else if (__tmp > 65535)
    111e:	6b a1       	ldd	r22, Y+35	; 0x23
    1120:	7c a1       	ldd	r23, Y+36	; 0x24
    1122:	8d a1       	ldd	r24, Y+37	; 0x25
    1124:	9e a1       	ldd	r25, Y+38	; 0x26
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	4c f5       	brge	.+82     	; 0x1188 <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1136:	6f a1       	ldd	r22, Y+39	; 0x27
    1138:	78 a5       	ldd	r23, Y+40	; 0x28
    113a:	89 a5       	ldd	r24, Y+41	; 0x29
    113c:	9a a5       	ldd	r25, Y+42	; 0x2a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e2       	ldi	r20, 0x20	; 32
    1144:	51 e4       	ldi	r21, 0x41	; 65
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9a a3       	std	Y+34, r25	; 0x22
    115c:	89 a3       	std	Y+33, r24	; 0x21
    115e:	0f c0       	rjmp	.+30     	; 0x117e <main+0x638>
    1160:	80 e9       	ldi	r24, 0x90	; 144
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	98 a3       	std	Y+32, r25	; 0x20
    1166:	8f 8f       	std	Y+31, r24	; 0x1f
    1168:	8f 8d       	ldd	r24, Y+31	; 0x1f
    116a:	98 a1       	ldd	r25, Y+32	; 0x20
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <main+0x626>
    1170:	98 a3       	std	Y+32, r25	; 0x20
    1172:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	89 a1       	ldd	r24, Y+33	; 0x21
    1176:	9a a1       	ldd	r25, Y+34	; 0x22
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9a a3       	std	Y+34, r25	; 0x22
    117c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117e:	89 a1       	ldd	r24, Y+33	; 0x21
    1180:	9a a1       	ldd	r25, Y+34	; 0x22
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	69 f7       	brne	.-38     	; 0x1160 <main+0x61a>
    1186:	3e c1       	rjmp	.+636    	; 0x1404 <main+0x8be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1188:	6b a1       	ldd	r22, Y+35	; 0x23
    118a:	7c a1       	ldd	r23, Y+36	; 0x24
    118c:	8d a1       	ldd	r24, Y+37	; 0x25
    118e:	9e a1       	ldd	r25, Y+38	; 0x26
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9a a3       	std	Y+34, r25	; 0x22
    119a:	89 a3       	std	Y+33, r24	; 0x21
    119c:	89 a1       	ldd	r24, Y+33	; 0x21
    119e:	9a a1       	ldd	r25, Y+34	; 0x22
    11a0:	9e 8f       	std	Y+30, r25	; 0x1e
    11a2:	8d 8f       	std	Y+29, r24	; 0x1d
    11a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <main+0x662>
    11ac:	9e 8f       	std	Y+30, r25	; 0x1e
    11ae:	8d 8f       	std	Y+29, r24	; 0x1d
    11b0:	29 c1       	rjmp	.+594    	; 0x1404 <main+0x8be>
   					_delay_ms(500);
   					break;
   				}
   				else {
   					key=KEYPAD_getPressedKey();
    11b2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <KEYPAD_getPressedKey>
    11b6:	fe 01       	movw	r30, r28
    11b8:	eb 5a       	subi	r30, 0xAB	; 171
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	80 83       	st	Z, r24
    11be:	61 cf       	rjmp	.-318    	; 0x1082 <main+0x53c>
   				}

   			 }

   		while(i<SIZE_OPERAND){
   			key=KEYPAD_getPressedKey();
    11c0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <KEYPAD_getPressedKey>
    11c4:	fe 01       	movw	r30, r28
    11c6:	eb 5a       	subi	r30, 0xAB	; 171
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 83       	st	Z, r24
   			 /* to store the sign of first digit the input is +/- */
   			 if ((i== 0)&&((key=='-')||(key=='+'))){
    11cc:	fe 01       	movw	r30, r28
    11ce:	e9 5a       	subi	r30, 0xA9	; 169
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	11 f5       	brne	.+68     	; 0x121c <main+0x6d6>
    11d8:	fe 01       	movw	r30, r28
    11da:	eb 5a       	subi	r30, 0xAB	; 171
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	80 81       	ld	r24, Z
    11e0:	8d 32       	cpi	r24, 0x2D	; 45
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <main+0x6aa>
    11e4:	fe 01       	movw	r30, r28
    11e6:	eb 5a       	subi	r30, 0xAB	; 171
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	8b 32       	cpi	r24, 0x2B	; 43
    11ee:	b1 f4       	brne	.+44     	; 0x121c <main+0x6d6>
   				if (key=='-')
    11f0:	fe 01       	movw	r30, r28
    11f2:	eb 5a       	subi	r30, 0xAB	; 171
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	8d 32       	cpi	r24, 0x2D	; 45
    11fa:	49 f4       	brne	.+18     	; 0x120e <main+0x6c8>
   					sign *=-1;
    11fc:	de 01       	movw	r26, r28
    11fe:	aa 5a       	subi	r26, 0xAA	; 170
    1200:	bf 4f       	sbci	r27, 0xFF	; 255
    1202:	fe 01       	movw	r30, r28
    1204:	ea 5a       	subi	r30, 0xAA	; 170
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	81 95       	neg	r24
    120c:	8c 93       	st	X, r24
   				LCD_sendCharacter(key);
    120e:	fe 01       	movw	r30, r28
    1210:	eb 5a       	subi	r30, 0xAB	; 171
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	80 81       	ld	r24, Z
    1216:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>
    121a:	82 c0       	rjmp	.+260    	; 0x1320 <main+0x7da>
   			}

   			/* if equal operand is pressed and there is a number stored in operand then raise
   			a flag and return to the main */
   			else if((key == '=' )&& (i>0)){
    121c:	fe 01       	movw	r30, r28
    121e:	eb 5a       	subi	r30, 0xAB	; 171
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	8d 33       	cpi	r24, 0x3D	; 61
    1226:	99 f4       	brne	.+38     	; 0x124e <main+0x708>
    1228:	fe 01       	movw	r30, r28
    122a:	e9 5a       	subi	r30, 0xA9	; 169
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	69 f0       	breq	.+26     	; 0x124e <main+0x708>
   				LCD_sendCharacter('=');
    1234:	8d e3       	ldi	r24, 0x3D	; 61
    1236:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>

   				perform_calculation (&operand1,&operator,&operand2);
    123a:	84 e8       	ldi	r24, 0x84	; 132
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	28 e8       	ldi	r18, 0x88	; 136
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	46 e8       	ldi	r20, 0x86	; 134
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 88 0a 	call	0x1510	; 0x1510 <perform_calculation>
    124c:	08 cf       	rjmp	.-496    	; 0x105e <main+0x518>
   				goto label;
   			 }
   			else if((key =='%')||(key =='*')||(key=='-')||(key=='+') ){
    124e:	fe 01       	movw	r30, r28
    1250:	eb 5a       	subi	r30, 0xAB	; 171
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	85 32       	cpi	r24, 0x25	; 37
    1258:	91 f0       	breq	.+36     	; 0x127e <main+0x738>
    125a:	fe 01       	movw	r30, r28
    125c:	eb 5a       	subi	r30, 0xAB	; 171
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	80 81       	ld	r24, Z
    1262:	8a 32       	cpi	r24, 0x2A	; 42
    1264:	61 f0       	breq	.+24     	; 0x127e <main+0x738>
    1266:	fe 01       	movw	r30, r28
    1268:	eb 5a       	subi	r30, 0xAB	; 171
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	8d 32       	cpi	r24, 0x2D	; 45
    1270:	31 f0       	breq	.+12     	; 0x127e <main+0x738>
    1272:	fe 01       	movw	r30, r28
    1274:	eb 5a       	subi	r30, 0xAB	; 171
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	8b 32       	cpi	r24, 0x2B	; 43
    127c:	b9 f4       	brne	.+46     	; 0x12ac <main+0x766>
   			/* in this case the user only entered a bunch of operands without any number */
   			 if(i==0){
    127e:	fe 01       	movw	r30, r28
    1280:	e9 5a       	subi	r30, 0xA9	; 169
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <main+0x746>
    128a:	4a c0       	rjmp	.+148    	; 0x1320 <main+0x7da>
   				/*do nothing*/
   			}

   			 else {

   				perform_calculation (&operand1,&operator,&operand2);
    128c:	84 e8       	ldi	r24, 0x84	; 132
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	28 e8       	ldi	r18, 0x88	; 136
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	46 e8       	ldi	r20, 0x86	; 134
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	b9 01       	movw	r22, r18
    129a:	0e 94 88 0a 	call	0x1510	; 0x1510 <perform_calculation>
   				operator=key;
    129e:	fe 01       	movw	r30, r28
    12a0:	eb 5a       	subi	r30, 0xAB	; 171
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	80 81       	ld	r24, Z
    12a6:	80 93 88 00 	sts	0x0088, r24
    12aa:	d9 ce       	rjmp	.-590    	; 0x105e <main+0x518>
   				goto label;

   				}
   			}
   			else {
   				operand2 =((operand2*10)+key)*sign;
    12ac:	80 91 86 00 	lds	r24, 0x0086
    12b0:	90 91 87 00 	lds	r25, 0x0087
    12b4:	9c 01       	movw	r18, r24
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	c9 01       	movw	r24, r18
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	28 0f       	add	r18, r24
    12c6:	39 1f       	adc	r19, r25
    12c8:	fe 01       	movw	r30, r28
    12ca:	eb 5a       	subi	r30, 0xAB	; 171
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 81       	ld	r24, Z
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	28 0f       	add	r18, r24
    12d6:	39 1f       	adc	r19, r25
    12d8:	fe 01       	movw	r30, r28
    12da:	ea 5a       	subi	r30, 0xAA	; 170
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	80 81       	ld	r24, Z
    12e0:	99 27       	eor	r25, r25
    12e2:	87 fd       	sbrc	r24, 7
    12e4:	90 95       	com	r25
    12e6:	fc 01       	movw	r30, r24
    12e8:	2e 9f       	mul	r18, r30
    12ea:	c0 01       	movw	r24, r0
    12ec:	2f 9f       	mul	r18, r31
    12ee:	90 0d       	add	r25, r0
    12f0:	3e 9f       	mul	r19, r30
    12f2:	90 0d       	add	r25, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	90 93 87 00 	sts	0x0087, r25
    12fa:	80 93 86 00 	sts	0x0086, r24
   				 /*if +ve then display it as integer */
   				LCD_integerToString(key);
    12fe:	fe 01       	movw	r30, r28
    1300:	eb 5a       	subi	r30, 0xAB	; 171
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_integerToString>

   				i++;
    130e:	de 01       	movw	r26, r28
    1310:	a9 5a       	subi	r26, 0xA9	; 169
    1312:	bf 4f       	sbci	r27, 0xFF	; 255
    1314:	fe 01       	movw	r30, r28
    1316:	e9 5a       	subi	r30, 0xA9	; 169
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	8c 93       	st	X, r24
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	aa ef       	ldi	r26, 0xFA	; 250
    1326:	b3 e4       	ldi	r27, 0x43	; 67
    1328:	89 8f       	std	Y+25, r24	; 0x19
    132a:	9a 8f       	std	Y+26, r25	; 0x1a
    132c:	ab 8f       	std	Y+27, r26	; 0x1b
    132e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	69 8d       	ldd	r22, Y+25	; 0x19
    1332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a e7       	ldi	r20, 0x7A	; 122
    133e:	55 e4       	ldi	r21, 0x45	; 69
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8d 8b       	std	Y+21, r24	; 0x15
    134a:	9e 8b       	std	Y+22, r25	; 0x16
    134c:	af 8b       	std	Y+23, r26	; 0x17
    134e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1350:	6d 89       	ldd	r22, Y+21	; 0x15
    1352:	7e 89       	ldd	r23, Y+22	; 0x16
    1354:	8f 89       	ldd	r24, Y+23	; 0x17
    1356:	98 8d       	ldd	r25, Y+24	; 0x18
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	2c f4       	brge	.+10     	; 0x1372 <main+0x82c>
		__ticks = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	8b 8b       	std	Y+19, r24	; 0x13
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <main+0x8aa>
	else if (__tmp > 65535)
    1372:	6d 89       	ldd	r22, Y+21	; 0x15
    1374:	7e 89       	ldd	r23, Y+22	; 0x16
    1376:	8f 89       	ldd	r24, Y+23	; 0x17
    1378:	98 8d       	ldd	r25, Y+24	; 0x18
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	4c f5       	brge	.+82     	; 0x13dc <main+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138a:	69 8d       	ldd	r22, Y+25	; 0x19
    138c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	51 e4       	ldi	r21, 0x41	; 65
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <main+0x88c>
    13b4:	80 e9       	ldi	r24, 0x90	; 144
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	9a 8b       	std	Y+18, r25	; 0x12
    13ba:	89 8b       	std	Y+17, r24	; 0x11
    13bc:	89 89       	ldd	r24, Y+17	; 0x11
    13be:	9a 89       	ldd	r25, Y+18	; 0x12
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <main+0x87a>
    13c4:	9a 8b       	std	Y+18, r25	; 0x12
    13c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	9c 89       	ldd	r25, Y+20	; 0x14
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	9c 8b       	std	Y+20, r25	; 0x14
    13d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	8b 89       	ldd	r24, Y+19	; 0x13
    13d4:	9c 89       	ldd	r25, Y+20	; 0x14
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <main+0x86e>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <main+0x8be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	98 8b       	std	Y+16, r25	; 0x10
    13f6:	8f 87       	std	Y+15, r24	; 0x0f
    13f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fa:	98 89       	ldd	r25, Y+16	; 0x10
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <main+0x8b6>
    1400:	98 8b       	std	Y+16, r25	; 0x10
    1402:	8f 87       	std	Y+15, r24	; 0x0f
   				}
   				}

   			 }

   		while(i<SIZE_OPERAND){
    1404:	fe 01       	movw	r30, r28
    1406:	e9 5a       	subi	r30, 0xA9	; 169
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 81       	ld	r24, Z
    140c:	85 30       	cpi	r24, 0x05	; 5
    140e:	08 f4       	brcc	.+2      	; 0x1412 <main+0x8cc>
    1410:	d7 ce       	rjmp	.-594    	; 0x11c0 <main+0x67a>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	aa ef       	ldi	r26, 0xFA	; 250
    1418:	b3 e4       	ldi	r27, 0x43	; 67
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	55 e4       	ldi	r21, 0x45	; 69
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <main+0x91e>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <main+0x99c>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <main+0x988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <main+0x97e>
    14a6:	80 e9       	ldi	r24, 0x90	; 144
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <main+0x96c>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <main+0x960>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <main+0x9b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <main+0x9a8>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01



   		 _delay_ms(500);/*delay for processing */

   		 LCD_sendCharacter('=');
    14f6:	8d e3       	ldi	r24, 0x3D	; 61
    14f8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>

   		 perform_calculation (&operand1,&operator,&operand2);
    14fc:	84 e8       	ldi	r24, 0x84	; 132
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	28 e8       	ldi	r18, 0x88	; 136
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	46 e8       	ldi	r20, 0x86	; 134
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	b9 01       	movw	r22, r18
    150a:	0e 94 88 0a 	call	0x1510	; 0x1510 <perform_calculation>
    150e:	a7 cd       	rjmp	.-1202   	; 0x105e <main+0x518>

00001510 <perform_calculation>:
   	}
}


 /*description : fn the perform the calculation based on the input from the user */
 void  perform_calculation (sint16 * op1,uint8 *operation,sint16 *op2){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	68 97       	sbiw	r28, 0x18	; 24
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	9a 8b       	std	Y+18, r25	; 0x12
    1526:	89 8b       	std	Y+17, r24	; 0x11
    1528:	7c 8b       	std	Y+20, r23	; 0x14
    152a:	6b 8b       	std	Y+19, r22	; 0x13
    152c:	5e 8b       	std	Y+22, r21	; 0x16
    152e:	4d 8b       	std	Y+21, r20	; 0x15
	 sint16 result=0;
    1530:	18 8a       	std	Y+16, r1	; 0x10
    1532:	1f 86       	std	Y+15, r1	; 0x0f


	 switch(*operation){
    1534:	eb 89       	ldd	r30, Y+19	; 0x13
    1536:	fc 89       	ldd	r31, Y+20	; 0x14
    1538:	80 81       	ld	r24, Z
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	38 8f       	std	Y+24, r19	; 0x18
    1540:	2f 8b       	std	Y+23, r18	; 0x17
    1542:	4f 89       	ldd	r20, Y+23	; 0x17
    1544:	58 8d       	ldd	r21, Y+24	; 0x18
    1546:	4a 32       	cpi	r20, 0x2A	; 42
    1548:	51 05       	cpc	r21, r1
    154a:	29 f1       	breq	.+74     	; 0x1596 <perform_calculation+0x86>
    154c:	8f 89       	ldd	r24, Y+23	; 0x17
    154e:	98 8d       	ldd	r25, Y+24	; 0x18
    1550:	8b 32       	cpi	r24, 0x2B	; 43
    1552:	91 05       	cpc	r25, r1
    1554:	34 f4       	brge	.+12     	; 0x1562 <perform_calculation+0x52>
    1556:	2f 89       	ldd	r18, Y+23	; 0x17
    1558:	38 8d       	ldd	r19, Y+24	; 0x18
    155a:	25 32       	cpi	r18, 0x25	; 37
    155c:	31 05       	cpc	r19, r1
    155e:	61 f0       	breq	.+24     	; 0x1578 <perform_calculation+0x68>
    1560:	49 c0       	rjmp	.+146    	; 0x15f4 <perform_calculation+0xe4>
    1562:	4f 89       	ldd	r20, Y+23	; 0x17
    1564:	58 8d       	ldd	r21, Y+24	; 0x18
    1566:	4b 32       	cpi	r20, 0x2B	; 43
    1568:	51 05       	cpc	r21, r1
    156a:	41 f1       	breq	.+80     	; 0x15bc <perform_calculation+0xac>
    156c:	8f 89       	ldd	r24, Y+23	; 0x17
    156e:	98 8d       	ldd	r25, Y+24	; 0x18
    1570:	8d 32       	cpi	r24, 0x2D	; 45
    1572:	91 05       	cpc	r25, r1
    1574:	81 f1       	breq	.+96     	; 0x15d6 <perform_calculation+0xc6>
    1576:	3e c0       	rjmp	.+124    	; 0x15f4 <perform_calculation+0xe4>
	 case '%':
	 	 result= (*op1)/ (*op2);
    1578:	e9 89       	ldd	r30, Y+17	; 0x11
    157a:	fa 89       	ldd	r31, Y+18	; 0x12
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	ed 89       	ldd	r30, Y+21	; 0x15
    1582:	fe 89       	ldd	r31, Y+22	; 0x16
    1584:	20 81       	ld	r18, Z
    1586:	31 81       	ldd	r19, Z+1	; 0x01
    1588:	b9 01       	movw	r22, r18
    158a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__divmodhi4>
    158e:	cb 01       	movw	r24, r22
    1590:	98 8b       	std	Y+16, r25	; 0x10
    1592:	8f 87       	std	Y+15, r24	; 0x0f
    1594:	35 c0       	rjmp	.+106    	; 0x1600 <perform_calculation+0xf0>
	 	 break;
	 case '*':
 	 	 result= (*op1)*(*op2);
    1596:	e9 89       	ldd	r30, Y+17	; 0x11
    1598:	fa 89       	ldd	r31, Y+18	; 0x12
    159a:	20 81       	ld	r18, Z
    159c:	31 81       	ldd	r19, Z+1	; 0x01
    159e:	ed 89       	ldd	r30, Y+21	; 0x15
    15a0:	fe 89       	ldd	r31, Y+22	; 0x16
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	ac 01       	movw	r20, r24
    15a8:	24 9f       	mul	r18, r20
    15aa:	c0 01       	movw	r24, r0
    15ac:	25 9f       	mul	r18, r21
    15ae:	90 0d       	add	r25, r0
    15b0:	34 9f       	mul	r19, r20
    15b2:	90 0d       	add	r25, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	98 8b       	std	Y+16, r25	; 0x10
    15b8:	8f 87       	std	Y+15, r24	; 0x0f
    15ba:	22 c0       	rjmp	.+68     	; 0x1600 <perform_calculation+0xf0>
	 	 break;
	 case '+':
		 result =(*op1)+(*op2);
    15bc:	e9 89       	ldd	r30, Y+17	; 0x11
    15be:	fa 89       	ldd	r31, Y+18	; 0x12
    15c0:	20 81       	ld	r18, Z
    15c2:	31 81       	ldd	r19, Z+1	; 0x01
    15c4:	ed 89       	ldd	r30, Y+21	; 0x15
    15c6:	fe 89       	ldd	r31, Y+22	; 0x16
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	82 0f       	add	r24, r18
    15ce:	93 1f       	adc	r25, r19
    15d0:	98 8b       	std	Y+16, r25	; 0x10
    15d2:	8f 87       	std	Y+15, r24	; 0x0f
    15d4:	15 c0       	rjmp	.+42     	; 0x1600 <perform_calculation+0xf0>
		 break;
	 case '-':
		  result=(*op1)-(*op2);
    15d6:	e9 89       	ldd	r30, Y+17	; 0x11
    15d8:	fa 89       	ldd	r31, Y+18	; 0x12
    15da:	20 81       	ld	r18, Z
    15dc:	31 81       	ldd	r19, Z+1	; 0x01
    15de:	ed 89       	ldd	r30, Y+21	; 0x15
    15e0:	fe 89       	ldd	r31, Y+22	; 0x16
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	a9 01       	movw	r20, r18
    15e8:	48 1b       	sub	r20, r24
    15ea:	59 0b       	sbc	r21, r25
    15ec:	ca 01       	movw	r24, r20
    15ee:	98 8b       	std	Y+16, r25	; 0x10
    15f0:	8f 87       	std	Y+15, r24	; 0x0f
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <perform_calculation+0xf0>
		  break;
	 default:
		 result=*op1;
    15f4:	e9 89       	ldd	r30, Y+17	; 0x11
    15f6:	fa 89       	ldd	r31, Y+18	; 0x12
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	98 8b       	std	Y+16, r25	; 0x10
    15fe:	8f 87       	std	Y+15, r24	; 0x0f
		 break;
	 }
	 LCD_clearScreen();
    1600:	0e 94 a5 1a 	call	0x354a	; 0x354a <LCD_clearScreen>
	 if(result<0){
    1604:	8f 85       	ldd	r24, Y+15	; 0x0f
    1606:	98 89       	ldd	r25, Y+16	; 0x10
    1608:	99 23       	and	r25, r25
    160a:	5c f4       	brge	.+22     	; 0x1622 <perform_calculation+0x112>
		 LCD_sendCharacter('-');
    160c:	8d e2       	ldi	r24, 0x2D	; 45
    160e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>
		 LCD_integerToString(-result);
    1612:	8f 85       	ldd	r24, Y+15	; 0x0f
    1614:	98 89       	ldd	r25, Y+16	; 0x10
    1616:	90 95       	com	r25
    1618:	81 95       	neg	r24
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_integerToString>
    1620:	04 c0       	rjmp	.+8      	; 0x162a <perform_calculation+0x11a>
	 }
	 else {

		 LCD_integerToString(result);
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	98 89       	ldd	r25, Y+16	; 0x10
    1626:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_integerToString>
	 }

	 *op1=result;
    162a:	e9 89       	ldd	r30, Y+17	; 0x11
    162c:	fa 89       	ldd	r31, Y+18	; 0x12
    162e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1630:	98 89       	ldd	r25, Y+16	; 0x10
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
	 *op2=0;
    1636:	ed 89       	ldd	r30, Y+21	; 0x15
    1638:	fe 89       	ldd	r31, Y+22	; 0x16
    163a:	11 82       	std	Z+1, r1	; 0x01
    163c:	10 82       	st	Z, r1
	 *operation=0;
    163e:	eb 89       	ldd	r30, Y+19	; 0x13
    1640:	fc 89       	ldd	r31, Y+20	; 0x14
    1642:	10 82       	st	Z, r1
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	aa e7       	ldi	r26, 0x7A	; 122
    164a:	b3 e4       	ldi	r27, 0x43	; 67
    164c:	8b 87       	std	Y+11, r24	; 0x0b
    164e:	9c 87       	std	Y+12, r25	; 0x0c
    1650:	ad 87       	std	Y+13, r26	; 0x0d
    1652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a e7       	ldi	r20, 0x7A	; 122
    1662:	55 e4       	ldi	r21, 0x45	; 69
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8f 83       	std	Y+7, r24	; 0x07
    166e:	98 87       	std	Y+8, r25	; 0x08
    1670:	a9 87       	std	Y+9, r26	; 0x09
    1672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1688:	88 23       	and	r24, r24
    168a:	2c f4       	brge	.+10     	; 0x1696 <perform_calculation+0x186>
		__ticks = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	3f c0       	rjmp	.+126    	; 0x1714 <perform_calculation+0x204>
	else if (__tmp > 65535)
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	57 e4       	ldi	r21, 0x47	; 71
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	4c f5       	brge	.+82     	; 0x1700 <perform_calculation+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <perform_calculation+0x1e6>
    16d8:	80 e9       	ldi	r24, 0x90	; 144
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <perform_calculation+0x1d4>
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9e 83       	std	Y+6, r25	; 0x06
    16f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <perform_calculation+0x1c8>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <perform_calculation+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <perform_calculation+0x210>
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01


	 _delay_ms(250);

 }
    1728:	68 96       	adiw	r28, 0x18	; 24
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <GPIO_setupPinDirection>:
 */
#include"gpio.h"
#include"common_macros.h"
#include<avr/io.h>

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <GPIO_setupPinDirection+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <GPIO_setupPinDirection+0x8>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	6a 83       	std	Y+2, r22	; 0x02
    174c:	4b 83       	std	Y+3, r20	; 0x03

	if((port_num>=NUMBER_OF_PORTS)||(pin_num>=NUMBER_OF_PINS_PER_PORT)){
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	08 f0       	brcs	.+2      	; 0x1756 <GPIO_setupPinDirection+0x1c>
    1754:	d5 c0       	rjmp	.+426    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	88 30       	cpi	r24, 0x08	; 8
    175a:	08 f0       	brcs	.+2      	; 0x175e <GPIO_setupPinDirection+0x24>
    175c:	d1 c0       	rjmp	.+418    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
		/* do nothing */
	}
	else{
		switch(port_num){
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3d 83       	std	Y+5, r19	; 0x05
    1766:	2c 83       	std	Y+4, r18	; 0x04
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	9d 81       	ldd	r25, Y+5	; 0x05
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <GPIO_setupPinDirection+0x3a>
    1772:	43 c0       	rjmp	.+134    	; 0x17fa <GPIO_setupPinDirection+0xc0>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	2c f4       	brge	.+10     	; 0x1788 <GPIO_setupPinDirection+0x4e>
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	71 f0       	breq	.+28     	; 0x17a2 <GPIO_setupPinDirection+0x68>
    1786:	bc c0       	rjmp	.+376    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
    1788:	2c 81       	ldd	r18, Y+4	; 0x04
    178a:	3d 81       	ldd	r19, Y+5	; 0x05
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <GPIO_setupPinDirection+0x5a>
    1792:	5f c0       	rjmp	.+190    	; 0x1852 <GPIO_setupPinDirection+0x118>
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <GPIO_setupPinDirection+0x66>
    179e:	85 c0       	rjmp	.+266    	; 0x18aa <GPIO_setupPinDirection+0x170>
    17a0:	af c0       	rjmp	.+350    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction==PIN_OUTPUT)
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	a1 f4       	brne	.+40     	; 0x17d0 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    17a8:	aa e3       	ldi	r26, 0x3A	; 58
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ea e3       	ldi	r30, 0x3A	; 58
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_setupPinDirection+0x8c>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_setupPinDirection+0x88>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	98 c0       	rjmp	.+304    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA,pin_num);
    17d0:	aa e3       	ldi	r26, 0x3A	; 58
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ea e3       	ldi	r30, 0x3A	; 58
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_setupPinDirection+0xb4>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_setupPinDirection+0xb0>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	83 c0       	rjmp	.+262    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction==PIN_OUTPUT)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	a1 f4       	brne	.+40     	; 0x1828 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1800:	a7 e3       	ldi	r26, 0x37	; 55
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e7 e3       	ldi	r30, 0x37	; 55
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <GPIO_setupPinDirection+0xe4>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <GPIO_setupPinDirection+0xe0>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	6c c0       	rjmp	.+216    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB,pin_num);
    1828:	a7 e3       	ldi	r26, 0x37	; 55
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e7 e3       	ldi	r30, 0x37	; 55
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_setupPinDirection+0x10c>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_setupPinDirection+0x108>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	57 c0       	rjmp	.+174    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction==PIN_OUTPUT)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	a1 f4       	brne	.+40     	; 0x1880 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1858:	a4 e3       	ldi	r26, 0x34	; 52
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e4 e3       	ldi	r30, 0x34	; 52
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <GPIO_setupPinDirection+0x13c>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <GPIO_setupPinDirection+0x138>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	40 c0       	rjmp	.+128    	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC,pin_num);
    1880:	a4 e3       	ldi	r26, 0x34	; 52
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e4 e3       	ldi	r30, 0x34	; 52
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_setupPinDirection+0x164>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_setupPinDirection+0x160>
    18a2:	80 95       	com	r24
    18a4:	84 23       	and	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	2b c0       	rjmp	.+86     	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction==PIN_OUTPUT)
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	a1 f4       	brne	.+40     	; 0x18d8 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    18b0:	a1 e3       	ldi	r26, 0x31	; 49
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e1 e3       	ldi	r30, 0x31	; 49
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <GPIO_setupPinDirection+0x194>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <GPIO_setupPinDirection+0x190>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD,pin_num);
    18d8:	a1 e3       	ldi	r26, 0x31	; 49
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e1 e3       	ldi	r30, 0x31	; 49
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_setupPinDirection+0x1bc>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_setupPinDirection+0x1b8>
    18fa:	80 95       	com	r24
    18fc:	84 23       	and	r24, r20
    18fe:	8c 93       	st	X, r24
			break;

		}
	}
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <GPIO_writePin>:
	 * Description :
	 * Write the value Logic High or Logic Low on the required pin.
	 * If the input port number or pin number are not correct, The function will not handle the request.
	 * If the pin is input, this function will enable/disable the internal pull-up resistor.
	 */
	void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <GPIO_writePin+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <GPIO_writePin+0x8>
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	6a 83       	std	Y+2, r22	; 0x02
    1922:	4b 83       	std	Y+3, r20	; 0x03
		if((port_num>=NUMBER_OF_PORTS)||(pin_num>=NUMBER_OF_PINS_PER_PORT)){
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	08 f0       	brcs	.+2      	; 0x192c <GPIO_writePin+0x1c>
    192a:	d5 c0       	rjmp	.+426    	; 0x1ad6 <GPIO_writePin+0x1c6>
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	88 30       	cpi	r24, 0x08	; 8
    1930:	08 f0       	brcs	.+2      	; 0x1934 <GPIO_writePin+0x24>
    1932:	d1 c0       	rjmp	.+418    	; 0x1ad6 <GPIO_writePin+0x1c6>
			/* do nothing */
		}
		else{
			switch(port_num){
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3d 83       	std	Y+5, r19	; 0x05
    193c:	2c 83       	std	Y+4, r18	; 0x04
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9d 81       	ldd	r25, Y+5	; 0x05
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <GPIO_writePin+0x3a>
    1948:	43 c0       	rjmp	.+134    	; 0x19d0 <GPIO_writePin+0xc0>
    194a:	2c 81       	ldd	r18, Y+4	; 0x04
    194c:	3d 81       	ldd	r19, Y+5	; 0x05
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	2c f4       	brge	.+10     	; 0x195e <GPIO_writePin+0x4e>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	71 f0       	breq	.+28     	; 0x1978 <GPIO_writePin+0x68>
    195c:	bc c0       	rjmp	.+376    	; 0x1ad6 <GPIO_writePin+0x1c6>
    195e:	2c 81       	ldd	r18, Y+4	; 0x04
    1960:	3d 81       	ldd	r19, Y+5	; 0x05
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	09 f4       	brne	.+2      	; 0x196a <GPIO_writePin+0x5a>
    1968:	5f c0       	rjmp	.+190    	; 0x1a28 <GPIO_writePin+0x118>
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <GPIO_writePin+0x66>
    1974:	85 c0       	rjmp	.+266    	; 0x1a80 <GPIO_writePin+0x170>
    1976:	af c0       	rjmp	.+350    	; 0x1ad6 <GPIO_writePin+0x1c6>
			case PORTA_ID:
				if(value==LOGIC_HIGH)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	a1 f4       	brne	.+40     	; 0x19a6 <GPIO_writePin+0x96>
					SET_BIT(PORTA,pin_num);
    197e:	ab e3       	ldi	r26, 0x3B	; 59
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e3       	ldi	r30, 0x3B	; 59
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_writePin+0x8c>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_writePin+0x88>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	98 c0       	rjmp	.+304    	; 0x1ad6 <GPIO_writePin+0x1c6>
				else
					CLEAR_BIT(PORTA,pin_num);
    19a6:	ab e3       	ldi	r26, 0x3B	; 59
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <GPIO_writePin+0xb4>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <GPIO_writePin+0xb0>
    19c8:	80 95       	com	r24
    19ca:	84 23       	and	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	83 c0       	rjmp	.+262    	; 0x1ad6 <GPIO_writePin+0x1c6>
				break;
			case PORTB_ID:
				if(value==LOGIC_HIGH)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	a1 f4       	brne	.+40     	; 0x19fe <GPIO_writePin+0xee>
					SET_BIT(PORTB,pin_num);
    19d6:	a8 e3       	ldi	r26, 0x38	; 56
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e8 e3       	ldi	r30, 0x38	; 56
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_writePin+0xe4>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_writePin+0xe0>
    19f8:	84 2b       	or	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	6c c0       	rjmp	.+216    	; 0x1ad6 <GPIO_writePin+0x1c6>
				else
					CLEAR_BIT(PORTB,pin_num);
    19fe:	a8 e3       	ldi	r26, 0x38	; 56
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e8 e3       	ldi	r30, 0x38	; 56
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <GPIO_writePin+0x10c>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <GPIO_writePin+0x108>
    1a20:	80 95       	com	r24
    1a22:	84 23       	and	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	57 c0       	rjmp	.+174    	; 0x1ad6 <GPIO_writePin+0x1c6>
				break;
			case PORTC_ID:
				if(value==LOGIC_HIGH)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	a1 f4       	brne	.+40     	; 0x1a56 <GPIO_writePin+0x146>
					SET_BIT(PORTC,pin_num);
    1a2e:	a5 e3       	ldi	r26, 0x35	; 53
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e3       	ldi	r30, 0x35	; 53
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_writePin+0x13c>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_writePin+0x138>
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	40 c0       	rjmp	.+128    	; 0x1ad6 <GPIO_writePin+0x1c6>
				else
					CLEAR_BIT(PORTC,pin_num);
    1a56:	a5 e3       	ldi	r26, 0x35	; 53
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e3       	ldi	r30, 0x35	; 53
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_writePin+0x164>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_writePin+0x160>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	2b c0       	rjmp	.+86     	; 0x1ad6 <GPIO_writePin+0x1c6>
				break;
			case PORTD_ID:
				if(value==LOGIC_HIGH)
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	a1 f4       	brne	.+40     	; 0x1aae <GPIO_writePin+0x19e>
					SET_BIT(PORTD,pin_num);
    1a86:	a2 e3       	ldi	r26, 0x32	; 50
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e2 e3       	ldi	r30, 0x32	; 50
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <GPIO_writePin+0x194>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <GPIO_writePin+0x190>
    1aa8:	84 2b       	or	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <GPIO_writePin+0x1c6>
				else
					CLEAR_BIT(PORTD,pin_num);
    1aae:	a2 e3       	ldi	r26, 0x32	; 50
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e2 e3       	ldi	r30, 0x32	; 50
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_writePin+0x1bc>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_writePin+0x1b8>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
				break;

			}
		}
	}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <GPIO_readPin>:
		/*
		 * Description :
		 * Read and return the value for the required pin, it should be Logic High or Logic Low.
		 * If the input port number or pin number are not correct, The function will return Logic Low.
		 */
		uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <GPIO_readPin+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <GPIO_readPin+0x8>
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	8a 83       	std	Y+2, r24	; 0x02
    1af6:	6b 83       	std	Y+3, r22	; 0x03
			uint8 pin_val=LOGIC_LOW;
    1af8:	19 82       	std	Y+1, r1	; 0x01
			if((port_num>=NUMBER_OF_PORTS)||(pin_num>=NUMBER_OF_PINS_PER_PORT)){
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <GPIO_readPin+0x1c>
    1b00:	84 c0       	rjmp	.+264    	; 0x1c0a <GPIO_readPin+0x124>
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	88 30       	cpi	r24, 0x08	; 8
    1b06:	08 f0       	brcs	.+2      	; 0x1b0a <GPIO_readPin+0x24>
    1b08:	80 c0       	rjmp	.+256    	; 0x1c0a <GPIO_readPin+0x124>
						/* do nothing */
					}
			else{
				switch(port_num){
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	3d 83       	std	Y+5, r19	; 0x05
    1b12:	2c 83       	std	Y+4, r18	; 0x04
    1b14:	4c 81       	ldd	r20, Y+4	; 0x04
    1b16:	5d 81       	ldd	r21, Y+5	; 0x05
    1b18:	41 30       	cpi	r20, 0x01	; 1
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	79 f1       	breq	.+94     	; 0x1b7c <GPIO_readPin+0x96>
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	9d 81       	ldd	r25, Y+5	; 0x05
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	91 05       	cpc	r25, r1
    1b26:	34 f4       	brge	.+12     	; 0x1b34 <GPIO_readPin+0x4e>
    1b28:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2c:	21 15       	cp	r18, r1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	69 f0       	breq	.+26     	; 0x1b4c <GPIO_readPin+0x66>
    1b32:	6b c0       	rjmp	.+214    	; 0x1c0a <GPIO_readPin+0x124>
    1b34:	4c 81       	ldd	r20, Y+4	; 0x04
    1b36:	5d 81       	ldd	r21, Y+5	; 0x05
    1b38:	42 30       	cpi	r20, 0x02	; 2
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	b9 f1       	breq	.+110    	; 0x1bac <GPIO_readPin+0xc6>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	91 05       	cpc	r25, r1
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <GPIO_readPin+0x64>
    1b48:	49 c0       	rjmp	.+146    	; 0x1bdc <GPIO_readPin+0xf6>
    1b4a:	5f c0       	rjmp	.+190    	; 0x1c0a <GPIO_readPin+0x124>
				  case PORTA_ID:
						if(BIT_IS_SET(PINA,pin_num))
    1b4c:	e9 e3       	ldi	r30, 0x39	; 57
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <GPIO_readPin+0x7e>
    1b60:	55 95       	asr	r21
    1b62:	47 95       	ror	r20
    1b64:	8a 95       	dec	r24
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <GPIO_readPin+0x7a>
    1b68:	ca 01       	movw	r24, r20
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	90 70       	andi	r25, 0x00	; 0
    1b6e:	88 23       	and	r24, r24
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <GPIO_readPin+0x92>
							pin_val=1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	49 c0       	rjmp	.+146    	; 0x1c0a <GPIO_readPin+0x124>
						else
							pin_val=0;
    1b78:	19 82       	std	Y+1, r1	; 0x01
    1b7a:	47 c0       	rjmp	.+142    	; 0x1c0a <GPIO_readPin+0x124>
						break;
					case PORTB_ID:
						if(BIT_IS_SET(PINB,pin_num))
    1b7c:	e6 e3       	ldi	r30, 0x36	; 54
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a9 01       	movw	r20, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <GPIO_readPin+0xae>
    1b90:	55 95       	asr	r21
    1b92:	47 95       	ror	r20
    1b94:	8a 95       	dec	r24
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <GPIO_readPin+0xaa>
    1b98:	ca 01       	movw	r24, r20
    1b9a:	81 70       	andi	r24, 0x01	; 1
    1b9c:	90 70       	andi	r25, 0x00	; 0
    1b9e:	88 23       	and	r24, r24
    1ba0:	19 f0       	breq	.+6      	; 0x1ba8 <GPIO_readPin+0xc2>
							pin_val=1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	31 c0       	rjmp	.+98     	; 0x1c0a <GPIO_readPin+0x124>
						else
							pin_val=0;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    1baa:	2f c0       	rjmp	.+94     	; 0x1c0a <GPIO_readPin+0x124>
						break;
					case PORTC_ID:
						if(BIT_IS_SET(PINC,pin_num))
    1bac:	e3 e3       	ldi	r30, 0x33	; 51
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <GPIO_readPin+0xde>
    1bc0:	55 95       	asr	r21
    1bc2:	47 95       	ror	r20
    1bc4:	8a 95       	dec	r24
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <GPIO_readPin+0xda>
    1bc8:	ca 01       	movw	r24, r20
    1bca:	81 70       	andi	r24, 0x01	; 1
    1bcc:	90 70       	andi	r25, 0x00	; 0
    1bce:	88 23       	and	r24, r24
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <GPIO_readPin+0xf2>
							pin_val=1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	19 c0       	rjmp	.+50     	; 0x1c0a <GPIO_readPin+0x124>
						else
							pin_val=0;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
    1bda:	17 c0       	rjmp	.+46     	; 0x1c0a <GPIO_readPin+0x124>
						break;
					case PORTD_ID:
						if(BIT_IS_SET(PIND,pin_num))
    1bdc:	e0 e3       	ldi	r30, 0x30	; 48
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <GPIO_readPin+0x10e>
    1bf0:	55 95       	asr	r21
    1bf2:	47 95       	ror	r20
    1bf4:	8a 95       	dec	r24
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <GPIO_readPin+0x10a>
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	90 70       	andi	r25, 0x00	; 0
    1bfe:	88 23       	and	r24, r24
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <GPIO_readPin+0x122>
							pin_val=1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <GPIO_readPin+0x124>
						else
							pin_val=0;
    1c08:	19 82       	std	Y+1, r1	; 0x01
						break;

						}
		}
 return pin_val;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <GPIO_setupPortDirection>:
		 * Setup the direction of the required port all pins input/output.
		 * If the direction value is PORT_INPUT all pins in this port should be input pins.
		 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
		 * If the input port number is not correct, The function will not handle the request.
		 */
		void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <GPIO_setupPortDirection+0x6>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <GPIO_setupPortDirection+0x8>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	6a 83       	std	Y+2, r22	; 0x02
			if((port_num>=NUMBER_OF_PORTS)){
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	90 f5       	brcc	.+100    	; 0x1c96 <GPIO_setupPortDirection+0x7a>
						/* do nothing */
					}
			else{
				switch(port_num){
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	3c 83       	std	Y+4, r19	; 0x04
    1c3a:	2b 83       	std	Y+3, r18	; 0x03
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	91 05       	cpc	r25, r1
    1c44:	d1 f0       	breq	.+52     	; 0x1c7a <GPIO_setupPortDirection+0x5e>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <GPIO_setupPortDirection+0x3e>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <GPIO_setupPortDirection+0x54>
    1c58:	1e c0       	rjmp	.+60     	; 0x1c96 <GPIO_setupPortDirection+0x7a>
    1c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	81 f0       	breq	.+32     	; 0x1c84 <GPIO_setupPortDirection+0x68>
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	83 30       	cpi	r24, 0x03	; 3
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	81 f0       	breq	.+32     	; 0x1c8e <GPIO_setupPortDirection+0x72>
    1c6e:	13 c0       	rjmp	.+38     	; 0x1c96 <GPIO_setupPortDirection+0x7a>
				  case PORTA_ID:
						DDRA=direction;
    1c70:	ea e3       	ldi	r30, 0x3A	; 58
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 83       	st	Z, r24
    1c78:	0e c0       	rjmp	.+28     	; 0x1c96 <GPIO_setupPortDirection+0x7a>
						break;
					case PORTB_ID:
						DDRB=direction;
    1c7a:	e7 e3       	ldi	r30, 0x37	; 55
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	80 83       	st	Z, r24
    1c82:	09 c0       	rjmp	.+18     	; 0x1c96 <GPIO_setupPortDirection+0x7a>
						break;
					case PORTC_ID:
						DDRC=direction;
    1c84:	e4 e3       	ldi	r30, 0x34	; 52
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	80 83       	st	Z, r24
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <GPIO_setupPortDirection+0x7a>
						break;
					case PORTD_ID:
						DDRD=direction;
    1c8e:	e1 e3       	ldi	r30, 0x31	; 49
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	80 83       	st	Z, r24
						break;
						}
		}
	}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <GPIO_writePort>:
		 * Write the value on the required port.
		 * If any pin in the port is output pin the value will be written.
		 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
		 * If the input port number is not correct, The function will not handle the request.
		 */
		void GPIO_writePort(uint8 port_num, uint8 value){
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <GPIO_writePort+0x6>
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <GPIO_writePort+0x8>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	6a 83       	std	Y+2, r22	; 0x02
			if((port_num>=NUMBER_OF_PORTS)){
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	84 30       	cpi	r24, 0x04	; 4
    1cb8:	90 f5       	brcc	.+100    	; 0x1d1e <GPIO_writePort+0x7a>
						/* do nothing */
					}
			else{
				switch(port_num){
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	3c 83       	std	Y+4, r19	; 0x04
    1cc2:	2b 83       	std	Y+3, r18	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	d1 f0       	breq	.+52     	; 0x1d02 <GPIO_writePort+0x5e>
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <GPIO_writePort+0x3e>
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	61 f0       	breq	.+24     	; 0x1cf8 <GPIO_writePort+0x54>
    1ce0:	1e c0       	rjmp	.+60     	; 0x1d1e <GPIO_writePort+0x7a>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	81 f0       	breq	.+32     	; 0x1d0c <GPIO_writePort+0x68>
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	83 30       	cpi	r24, 0x03	; 3
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	81 f0       	breq	.+32     	; 0x1d16 <GPIO_writePort+0x72>
    1cf6:	13 c0       	rjmp	.+38     	; 0x1d1e <GPIO_writePort+0x7a>
				  case PORTA_ID:
						PORTA=value;
    1cf8:	eb e3       	ldi	r30, 0x3B	; 59
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	80 83       	st	Z, r24
    1d00:	0e c0       	rjmp	.+28     	; 0x1d1e <GPIO_writePort+0x7a>
						break;
					case PORTB_ID:
						PORTB=value;
    1d02:	e8 e3       	ldi	r30, 0x38	; 56
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	80 83       	st	Z, r24
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <GPIO_writePort+0x7a>
						break;
					case PORTC_ID:
						PORTC=value;
    1d0c:	e5 e3       	ldi	r30, 0x35	; 53
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	80 83       	st	Z, r24
    1d14:	04 c0       	rjmp	.+8      	; 0x1d1e <GPIO_writePort+0x7a>
						break;
					case PORTD_ID:
						PORTD=value;
    1d16:	e2 e3       	ldi	r30, 0x32	; 50
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	80 83       	st	Z, r24
						break;
						}
		}
		}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <GPIO_readPort>:
		/*
		 * Description :
		 * Read and return the value of the required port.
		 * If the input port number is not correct, The function will return ZERO value.
		 */
		uint8 GPIO_readPort(uint8 port_num){
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_readPort+0x6>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <GPIO_readPort+0x8>
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	8a 83       	std	Y+2, r24	; 0x02
			uint8 port_val =0;
    1d3a:	19 82       	std	Y+1, r1	; 0x01
			if(port_num>=NUMBER_OF_PORTS){
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	84 30       	cpi	r24, 0x04	; 4
    1d40:	90 f5       	brcc	.+100    	; 0x1da6 <GPIO_readPort+0x7a>
						/* do nothing */
					}
			else{
				switch(port_num){
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	3c 83       	std	Y+4, r19	; 0x04
    1d4a:	2b 83       	std	Y+3, r18	; 0x03
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	91 05       	cpc	r25, r1
    1d54:	d1 f0       	breq	.+52     	; 0x1d8a <GPIO_readPort+0x5e>
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <GPIO_readPort+0x3e>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	61 f0       	breq	.+24     	; 0x1d80 <GPIO_readPort+0x54>
    1d68:	1e c0       	rjmp	.+60     	; 0x1da6 <GPIO_readPort+0x7a>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	81 f0       	breq	.+32     	; 0x1d94 <GPIO_readPort+0x68>
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	81 f0       	breq	.+32     	; 0x1d9e <GPIO_readPort+0x72>
    1d7e:	13 c0       	rjmp	.+38     	; 0x1da6 <GPIO_readPort+0x7a>
				  case PORTA_ID:
						port_val=PINA;
    1d80:	e9 e3       	ldi	r30, 0x39	; 57
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	0e c0       	rjmp	.+28     	; 0x1da6 <GPIO_readPort+0x7a>
						break;
					case PORTB_ID:
						port_val=PINB;
    1d8a:	e6 e3       	ldi	r30, 0x36	; 54
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	09 c0       	rjmp	.+18     	; 0x1da6 <GPIO_readPort+0x7a>
						break;
					case PORTC_ID:
						port_val=PINC;
    1d94:	e3 e3       	ldi	r30, 0x33	; 51
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <GPIO_readPort+0x7a>
						break;
					case PORTD_ID:
						port_val=PIND;
    1d9e:	e0 e3       	ldi	r30, 0x30	; 48
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	89 83       	std	Y+1, r24	; 0x01
						break;

						}
		}
			return port_val;
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <KEYPAD_getPressedKey>:

/* function definition */
/* Description :
* Get the Keypad pressed button
*/
uint8 KEYPAD_getPressedKey(void){
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	60 97       	sbiw	r28, 0x10	; 16
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
	uint8 row,col; /* variables to itterate over the rows and cols */

	/* setting all rows direction to input direction */
	for (row=0;row<4;row++){
    1dca:	18 8a       	std	Y+16, r1	; 0x10
    1dcc:	0b c0       	rjmp	.+22     	; 0x1de4 <KEYPAD_getPressedKey+0x2e>
	 GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID +row ,PIN_INPUT);
    1dce:	88 89       	ldd	r24, Y+16	; 0x10
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	9c 5f       	subi	r25, 0xFC	; 252
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
*/
uint8 KEYPAD_getPressedKey(void){
	uint8 row,col; /* variables to itterate over the rows and cols */

	/* setting all rows direction to input direction */
	for (row=0;row<4;row++){
    1dde:	88 89       	ldd	r24, Y+16	; 0x10
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	88 8b       	std	Y+16, r24	; 0x10
    1de4:	88 89       	ldd	r24, Y+16	; 0x10
    1de6:	84 30       	cpi	r24, 0x04	; 4
    1de8:	90 f3       	brcs	.-28     	; 0x1dce <KEYPAD_getPressedKey+0x18>
	 GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID +row ,PIN_INPUT);
	}

	/*set the first 3 cols (as for sure the will be set in both cases 4*4 and 4*3 )to input  */
	for (col=0;col<3;col++){
    1dea:	1f 86       	std	Y+15, r1	; 0x0f
    1dec:	0b c0       	rjmp	.+22     	; 0x1e04 <KEYPAD_getPressedKey+0x4e>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID +col ,PIN_INPUT);
    1dee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df0:	98 2f       	mov	r25, r24
    1df2:	9e 5f       	subi	r25, 0xFE	; 254
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	69 2f       	mov	r22, r25
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
	for (row=0;row<4;row++){
	 GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID +row ,PIN_INPUT);
	}

	/*set the first 3 cols (as for sure the will be set in both cases 4*4 and 4*3 )to input  */
	for (col=0;col<3;col++){
    1dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	8f 87       	std	Y+15, r24	; 0x0f
    1e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	90 f3       	brcs	.-28     	; 0x1dee <KEYPAD_getPressedKey+0x38>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID +col ,PIN_INPUT);
	}

	/* in case of 4*4 keypad adjust the last pin in cols */
	#if(KEYPAD_NUM_COLS==4)
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID +col ,PIN_INPUT);
    1e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	9e 5f       	subi	r25, 0xFE	; 254
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	69 2f       	mov	r22, r25
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
 * third:call another fn to adjust the output(in case of non standard keypad
 */

while(1){

	for (row=0;row<KEYPAD_NUM_ROWS;row++){
    1e1a:	18 8a       	std	Y+16, r1	; 0x10
    1e1c:	b4 c0       	rjmp	.+360    	; 0x1f86 <KEYPAD_getPressedKey+0x1d0>
		/*set the row as outpus  */
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID +row ,PIN_OUTPUT);
    1e1e:	88 89       	ldd	r24, Y+16	; 0x10
    1e20:	98 2f       	mov	r25, r24
    1e22:	9c 5f       	subi	r25, 0xFC	; 252
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	69 2f       	mov	r22, r25
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>

		/*write logic pressed on that row */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID +row ,KEYPAD_BUTTON_PRESSED);
    1e2e:	88 89       	ldd	r24, Y+16	; 0x10
    1e30:	98 2f       	mov	r25, r24
    1e32:	9c 5f       	subi	r25, 0xFC	; 252
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	69 2f       	mov	r22, r25
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>


		/*iterrate over the cols to know which button is pressed in that row(get intersection
		 * between rows and cols)
		 */
		for(col=0;col<KEYPAD_NUM_COLS;col++){
    1e3e:	1f 86       	std	Y+15, r1	; 0x0f
    1e40:	22 c0       	rjmp	.+68     	; 0x1e86 <KEYPAD_getPressedKey+0xd0>
			/*check on col pin if pressed or not */

			if((GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID +col))==KEYPAD_BUTTON_PRESSED){
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	98 2f       	mov	r25, r24
    1e46:	9e 5f       	subi	r25, 0xFE	; 254
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	69 2f       	mov	r22, r25
    1e4c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <GPIO_readPin>
    1e50:	88 23       	and	r24, r24
    1e52:	b1 f4       	brne	.+44     	; 0x1e80 <KEYPAD_getPressedKey+0xca>
					#ifdef STANDARD_KEYPAD
					/*case of 4*4 and standard */
						return((row*KEYPAD_NUM_COLS)+col+1);
					#else
						/*case of 4*4 and non_standard */
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1e54:	88 89       	ldd	r24, Y+16	; 0x10
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	98 2f       	mov	r25, r24
    1e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e66:	89 0f       	add	r24, r25
    1e68:	8f 5f       	subi	r24, 0xFF	; 255
    1e6a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <KEYPAD_4x4_adjustKeyNumber>

		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
	}/*end of for loop(rows) */
}/*end of while 1 */
}/*end of fn */
    1e6e:	60 96       	adiw	r28, 0x10	; 16
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret


		/*iterrate over the cols to know which button is pressed in that row(get intersection
		 * between rows and cols)
		 */
		for(col=0;col<KEYPAD_NUM_COLS;col++){
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	8f 87       	std	Y+15, r24	; 0x0f
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	84 30       	cpi	r24, 0x04	; 4
    1e8a:	d8 f2       	brcs	.-74     	; 0x1e42 <KEYPAD_getPressedKey+0x8c>
					#endif
				#endif
			}/*end of if cond */
		}/*end of for loop (of cols)*/

		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1e8c:	88 89       	ldd	r24, Y+16	; 0x10
    1e8e:	98 2f       	mov	r25, r24
    1e90:	9c 5f       	subi	r25, 0xFC	; 252
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	69 2f       	mov	r22, r25
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea2:	b0 e4       	ldi	r27, 0x40	; 64
    1ea4:	8b 87       	std	Y+11, r24	; 0x0b
    1ea6:	9c 87       	std	Y+12, r25	; 0x0c
    1ea8:	ad 87       	std	Y+13, r26	; 0x0d
    1eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a e7       	ldi	r20, 0x7A	; 122
    1eba:	55 e4       	ldi	r21, 0x45	; 69
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	98 87       	std	Y+8, r25	; 0x08
    1ec8:	a9 87       	std	Y+9, r26	; 0x09
    1eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <KEYPAD_getPressedKey+0x198>
    1f30:	80 e9       	ldi	r24, 0x90	; 144
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <KEYPAD_getPressedKey+0x186>
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <KEYPAD_getPressedKey+0x17a>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5a:	78 85       	ldd	r23, Y+8	; 0x08
    1f5c:	89 85       	ldd	r24, Y+9	; 0x09
    1f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <KEYPAD_getPressedKey+0x1c2>
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
 * third:call another fn to adjust the output(in case of non standard keypad
 */

while(1){

	for (row=0;row<KEYPAD_NUM_ROWS;row++){
    1f80:	88 89       	ldd	r24, Y+16	; 0x10
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	88 8b       	std	Y+16, r24	; 0x10
    1f86:	88 89       	ldd	r24, Y+16	; 0x10
    1f88:	84 30       	cpi	r24, 0x04	; 4
    1f8a:	08 f4       	brcc	.+2      	; 0x1f8e <KEYPAD_getPressedKey+0x1d8>
    1f8c:	48 cf       	rjmp	.-368    	; 0x1e1e <KEYPAD_getPressedKey+0x68>
    1f8e:	45 cf       	rjmp	.-374    	; 0x1e1a <KEYPAD_getPressedKey+0x64>

00001f90 <KEYPAD_4x4_adjustKeyNumber>:
				button_value=button_number;
			}
			return button_value;
		}
#elif(KEYPAD_NUM_COLS==4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
			uint8 button_value =0;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
			switch (button_number){
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3c 83       	std	Y+4, r19	; 0x04
    1fa8:	2b 83       	std	Y+3, r18	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	88 30       	cpi	r24, 0x08	; 8
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1fb4:	70 c0       	rjmp	.+224    	; 0x2096 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fba:	29 30       	cpi	r18, 0x09	; 9
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	5c f5       	brge	.+86     	; 0x2016 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1fca:	59 c0       	rjmp	.+178    	; 0x207e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	25 30       	cpi	r18, 0x05	; 5
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	9c f4       	brge	.+38     	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	91 05       	cpc	r25, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1fe0:	48 c0       	rjmp	.+144    	; 0x2072 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe6:	23 30       	cpi	r18, 0x03	; 3
    1fe8:	31 05       	cpc	r19, r1
    1fea:	0c f0       	brlt	.+2      	; 0x1fee <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1fec:	45 c0       	rjmp	.+138    	; 0x2078 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ff8:	39 c0       	rjmp	.+114    	; 0x206c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ffa:	67 c0       	rjmp	.+206    	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    2000:	26 30       	cpi	r18, 0x06	; 6
    2002:	31 05       	cpc	r19, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2006:	41 c0       	rjmp	.+130    	; 0x208a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	87 30       	cpi	r24, 0x07	; 7
    200e:	91 05       	cpc	r25, r1
    2010:	0c f0       	brlt	.+2      	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2012:	3e c0       	rjmp	.+124    	; 0x2090 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2014:	37 c0       	rjmp	.+110    	; 0x2084 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	2c 30       	cpi	r18, 0x0C	; 12
    201c:	31 05       	cpc	r19, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2020:	46 c0       	rjmp	.+140    	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	8d 30       	cpi	r24, 0x0D	; 13
    2028:	91 05       	cpc	r25, r1
    202a:	5c f4       	brge	.+22     	; 0x2042 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    202c:	2b 81       	ldd	r18, Y+3	; 0x03
    202e:	3c 81       	ldd	r19, Y+4	; 0x04
    2030:	2a 30       	cpi	r18, 0x0A	; 10
    2032:	31 05       	cpc	r19, r1
    2034:	b1 f1       	breq	.+108    	; 0x20a2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	8b 30       	cpi	r24, 0x0B	; 11
    203c:	91 05       	cpc	r25, r1
    203e:	a4 f5       	brge	.+104    	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2040:	2d c0       	rjmp	.+90     	; 0x209c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2042:	2b 81       	ldd	r18, Y+3	; 0x03
    2044:	3c 81       	ldd	r19, Y+4	; 0x04
    2046:	2e 30       	cpi	r18, 0x0E	; 14
    2048:	31 05       	cpc	r19, r1
    204a:	b9 f1       	breq	.+110    	; 0x20ba <KEYPAD_4x4_adjustKeyNumber+0x12a>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	8e 30       	cpi	r24, 0x0E	; 14
    2052:	91 05       	cpc	r25, r1
    2054:	7c f1       	brlt	.+94     	; 0x20b4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2056:	2b 81       	ldd	r18, Y+3	; 0x03
    2058:	3c 81       	ldd	r19, Y+4	; 0x04
    205a:	2f 30       	cpi	r18, 0x0F	; 15
    205c:	31 05       	cpc	r19, r1
    205e:	79 f1       	breq	.+94     	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	80 31       	cpi	r24, 0x10	; 16
    2066:	91 05       	cpc	r25, r1
    2068:	69 f1       	breq	.+90     	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    206a:	2f c0       	rjmp	.+94     	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0x13a>
			case 1 :
				button_value=7;
    206c:	87 e0       	ldi	r24, 0x07	; 7
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	2e c0       	rjmp	.+92     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 2:
				button_value=8;
    2072:	88 e0       	ldi	r24, 0x08	; 8
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	2b c0       	rjmp	.+86     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 3:
				button_value =9;
    2078:	89 e0       	ldi	r24, 0x09	; 9
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	28 c0       	rjmp	.+80     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 4:
				button_value ='%';
    207e:	85 e2       	ldi	r24, 0x25	; 37
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	25 c0       	rjmp	.+74     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 5:
				button_value =4;
    2084:	84 e0       	ldi	r24, 0x04	; 4
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	22 c0       	rjmp	.+68     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 6:
				button_value =5;
    208a:	85 e0       	ldi	r24, 0x05	; 5
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	1f c0       	rjmp	.+62     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 7:
				button_value =6;
    2090:	86 e0       	ldi	r24, 0x06	; 6
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	1c c0       	rjmp	.+56     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 8:
				button_value ='*';
    2096:	8a e2       	ldi	r24, 0x2A	; 42
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	19 c0       	rjmp	.+50     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 9:
				button_value =1;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	16 c0       	rjmp	.+44     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 10:
				button_value =2;
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	13 c0       	rjmp	.+38     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 11:
				button_value =3;
    20a8:	83 e0       	ldi	r24, 0x03	; 3
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	10 c0       	rjmp	.+32     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 12:
				button_value ='-';
    20ae:	8d e2       	ldi	r24, 0x2D	; 45
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 13:
				button_value =13;
    20b4:	8d e0       	ldi	r24, 0x0D	; 13
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 14:
				button_value =0;
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	08 c0       	rjmp	.+16     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 15:
				button_value ='=';
    20be:	8d e3       	ldi	r24, 0x3D	; 61
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	05 c0       	rjmp	.+10     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 16:
				button_value ='+';
    20c4:	8b e2       	ldi	r24, 0x2B	; 43
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			default :
				button_value=button_number;
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
			}
			return button_value;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
		}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <LCD_init>:
 * 1.set the direction of the pins using gpio driver
 * 2.set the mood of bit using the its command
 * turn off cursor
 * clear the screen
 */
void LCD_init(void ){
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	2e 97       	sbiw	r28, 0x0e	; 14
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
	/* set the direction of main pins (enable ,RS)*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	62 e0       	ldi	r22, 0x02	; 2
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 ea       	ldi	r26, 0xA0	; 160
    210c:	b1 e4       	ldi	r27, 0x41	; 65
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	9c 87       	std	Y+12, r25	; 0x0c
    2112:	ad 87       	std	Y+13, r26	; 0x0d
    2114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a e7       	ldi	r20, 0x7A	; 122
    2124:	55 e4       	ldi	r21, 0x45	; 69
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8f 83       	std	Y+7, r24	; 0x07
    2130:	98 87       	std	Y+8, r25	; 0x08
    2132:	a9 87       	std	Y+9, r26	; 0x09
    2134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_init+0x7a>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_init+0xda>
    219a:	80 e9       	ldi	r24, 0x90	; 144
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_init+0xc8>
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_init+0xbc>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_init+0x104>
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);
	/*configuration of DB pins direction based on the mood */
	#if (LCD_DATA_BITS_MODE==4)
	GPIO_setupPinDirection(LCD_DB_PORT_ID,LCD_DB4_PIN_ID, PIN_OUTPUT);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	63 e0       	ldi	r22, 0x03	; 3
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DB_PORT_ID,LCD_DB5_PIN_ID, PIN_OUTPUT);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DB_PORT_ID,LCD_DB6_PIN_ID, PIN_OUTPUT);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	65 e0       	ldi	r22, 0x05	; 5
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DB_PORT_ID,LCD_DB7_PIN_ID, PIN_OUTPUT);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	66 e0       	ldi	r22, 0x06	; 6
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 9d 0b 	call	0x173a	; 0x173a <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2212:	83 e3       	ldi	r24, 0x33	; 51
    2214:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2218:	82 e3       	ldi	r24, 0x32	; 50
    221a:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE );
    221e:	88 e2       	ldi	r24, 0x28	; 40
    2220:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DB_PORT_ID, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE  );

	#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2224:	8c e0       	ldi	r24, 0x0C	; 12
    2226:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>
}
    2230:	2e 96       	adiw	r28, 0x0e	; 14
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <LCD_sendCommand>:
 *  it on 2 steps from MSB to LSB and deal with it as writing 2
 *   commands so disable then enable then disable again )
 * 6.enable =0
 * 7.delay 1ms
 */
void LCD_sendCommand(uint8 command){
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	c3 56       	subi	r28, 0x63	; 99
    2250:	d0 40       	sbci	r29, 0x00	; 0
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	fe 01       	movw	r30, r28
    225e:	ed 59       	subi	r30, 0x9D	; 157
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);/*RS=1*/
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);/*ENABLE=0*/
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2278:	fe 01       	movw	r30, r28
    227a:	e1 5a       	subi	r30, 0xA1	; 161
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e8       	ldi	r26, 0x80	; 128
    2284:	bf e3       	ldi	r27, 0x3F	; 63
    2286:	80 83       	st	Z, r24
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	a2 83       	std	Z+2, r26	; 0x02
    228c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228e:	8e 01       	movw	r16, r28
    2290:	05 5a       	subi	r16, 0xA5	; 165
    2292:	1f 4f       	sbci	r17, 0xFF	; 255
    2294:	fe 01       	movw	r30, r28
    2296:	e1 5a       	subi	r30, 0xA1	; 161
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a e7       	ldi	r20, 0x7A	; 122
    22a8:	55 e4       	ldi	r21, 0x45	; 69
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	f8 01       	movw	r30, r16
    22b4:	80 83       	st	Z, r24
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	a2 83       	std	Z+2, r26	; 0x02
    22ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22bc:	fe 01       	movw	r30, r28
    22be:	e5 5a       	subi	r30, 0xA5	; 165
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	44 f4       	brge	.+16     	; 0x22ea <LCD_sendCommand+0xa8>
		__ticks = 1;
    22da:	fe 01       	movw	r30, r28
    22dc:	e7 5a       	subi	r30, 0xA7	; 167
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	64 c0       	rjmp	.+200    	; 0x23b2 <LCD_sendCommand+0x170>
	else if (__tmp > 65535)
    22ea:	fe 01       	movw	r30, r28
    22ec:	e5 5a       	subi	r30, 0xA5	; 165
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	0c f0       	brlt	.+2      	; 0x230a <LCD_sendCommand+0xc8>
    2308:	43 c0       	rjmp	.+134    	; 0x2390 <LCD_sendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	fe 01       	movw	r30, r28
    230c:	e1 5a       	subi	r30, 0xA1	; 161
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8e 01       	movw	r16, r28
    232a:	07 5a       	subi	r16, 0xA7	; 167
    232c:	1f 4f       	sbci	r17, 0xFF	; 255
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	f8 01       	movw	r30, r16
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	80 83       	st	Z, r24
    2340:	1f c0       	rjmp	.+62     	; 0x2380 <LCD_sendCommand+0x13e>
    2342:	fe 01       	movw	r30, r28
    2344:	e9 5a       	subi	r30, 0xA9	; 169
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 e9       	ldi	r24, 0x90	; 144
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
    2350:	fe 01       	movw	r30, r28
    2352:	e9 5a       	subi	r30, 0xA9	; 169
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_sendCommand+0x118>
    235e:	fe 01       	movw	r30, r28
    2360:	e9 5a       	subi	r30, 0xA9	; 169
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	de 01       	movw	r26, r28
    236a:	a7 5a       	subi	r26, 0xA7	; 167
    236c:	bf 4f       	sbci	r27, 0xFF	; 255
    236e:	fe 01       	movw	r30, r28
    2370:	e7 5a       	subi	r30, 0xA7	; 167
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	11 96       	adiw	r26, 0x01	; 1
    237c:	9c 93       	st	X, r25
    237e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5a       	subi	r30, 0xA7	; 167
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	d1 f6       	brne	.-76     	; 0x2342 <LCD_sendCommand+0x100>
    238e:	27 c0       	rjmp	.+78     	; 0x23de <LCD_sendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2390:	8e 01       	movw	r16, r28
    2392:	07 5a       	subi	r16, 0xA7	; 167
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	fe 01       	movw	r30, r28
    2398:	e5 5a       	subi	r30, 0xA5	; 165
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	f8 01       	movw	r30, r16
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
    23b2:	de 01       	movw	r26, r28
    23b4:	ab 5a       	subi	r26, 0xAB	; 171
    23b6:	bf 4f       	sbci	r27, 0xFF	; 255
    23b8:	fe 01       	movw	r30, r28
    23ba:	e7 5a       	subi	r30, 0xA7	; 167
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	8d 93       	st	X+, r24
    23c4:	9c 93       	st	X, r25
    23c6:	fe 01       	movw	r30, r28
    23c8:	eb 5a       	subi	r30, 0xAB	; 171
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_sendCommand+0x18e>
    23d4:	fe 01       	movw	r30, r28
    23d6:	eb 5a       	subi	r30, 0xAB	; 171
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24

	_delay_ms(1);/*Tas delay time */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*ENABLE=1*/
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	62 e0       	ldi	r22, 0x02	; 2
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    23e8:	fe 01       	movw	r30, r28
    23ea:	ef 5a       	subi	r30, 0xAF	; 175
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a0 e8       	ldi	r26, 0x80	; 128
    23f4:	bf e3       	ldi	r27, 0x3F	; 63
    23f6:	80 83       	st	Z, r24
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	a2 83       	std	Z+2, r26	; 0x02
    23fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	8e 01       	movw	r16, r28
    2400:	03 5b       	subi	r16, 0xB3	; 179
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	ef 5a       	subi	r30, 0xAF	; 175
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a e7       	ldi	r20, 0x7A	; 122
    2418:	55 e4       	ldi	r21, 0x45	; 69
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	f8 01       	movw	r30, r16
    2424:	80 83       	st	Z, r24
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	a2 83       	std	Z+2, r26	; 0x02
    242a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242c:	fe 01       	movw	r30, r28
    242e:	e3 5b       	subi	r30, 0xB3	; 179
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	44 f4       	brge	.+16     	; 0x245a <LCD_sendCommand+0x218>
		__ticks = 1;
    244a:	fe 01       	movw	r30, r28
    244c:	e5 5b       	subi	r30, 0xB5	; 181
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	64 c0       	rjmp	.+200    	; 0x2522 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    245a:	fe 01       	movw	r30, r28
    245c:	e3 5b       	subi	r30, 0xB3	; 179
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	0c f0       	brlt	.+2      	; 0x247a <LCD_sendCommand+0x238>
    2478:	43 c0       	rjmp	.+134    	; 0x2500 <LCD_sendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	fe 01       	movw	r30, r28
    247c:	ef 5a       	subi	r30, 0xAF	; 175
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8e 01       	movw	r16, r28
    249a:	05 5b       	subi	r16, 0xB5	; 181
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    24b0:	1f c0       	rjmp	.+62     	; 0x24f0 <LCD_sendCommand+0x2ae>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 5b       	subi	r30, 0xB7	; 183
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 e9       	ldi	r24, 0x90	; 144
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	fe 01       	movw	r30, r28
    24c2:	e7 5b       	subi	r30, 0xB7	; 183
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_sendCommand+0x288>
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5b       	subi	r30, 0xB7	; 183
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	de 01       	movw	r26, r28
    24da:	a5 5b       	subi	r26, 0xB5	; 181
    24dc:	bf 4f       	sbci	r27, 0xFF	; 255
    24de:	fe 01       	movw	r30, r28
    24e0:	e5 5b       	subi	r30, 0xB5	; 181
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	9c 93       	st	X, r25
    24ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	fe 01       	movw	r30, r28
    24f2:	e5 5b       	subi	r30, 0xB5	; 181
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	d1 f6       	brne	.-76     	; 0x24b2 <LCD_sendCommand+0x270>
    24fe:	27 c0       	rjmp	.+78     	; 0x254e <LCD_sendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	8e 01       	movw	r16, r28
    2502:	05 5b       	subi	r16, 0xB5	; 181
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	e3 5b       	subi	r30, 0xB3	; 179
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
    2522:	de 01       	movw	r26, r28
    2524:	a9 5b       	subi	r26, 0xB9	; 185
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	8d 93       	st	X+, r24
    2534:	9c 93       	st	X, r25
    2536:	fe 01       	movw	r30, r28
    2538:	e9 5b       	subi	r30, 0xB9	; 185
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <LCD_sendCommand+0x2fe>
    2544:	fe 01       	movw	r30, r28
    2546:	e9 5b       	subi	r30, 0xB9	; 185
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
	_delay_ms(1);/*Tpw delay time */

/* configurations to write command on 2 steps in case of 4 bits mood */
	#if(LCD_DATA_BITS_MODE==4)
	/*take the MSB (4_bits) */
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB4_PIN_ID ,READ_PIN(command,4));
    254e:	fe 01       	movw	r30, r28
    2550:	ed 59       	subi	r30, 0x9D	; 157
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	80 71       	andi	r24, 0x10	; 16
    255c:	90 70       	andi	r25, 0x00	; 0
    255e:	95 95       	asr	r25
    2560:	87 95       	ror	r24
    2562:	95 95       	asr	r25
    2564:	87 95       	ror	r24
    2566:	95 95       	asr	r25
    2568:	87 95       	ror	r24
    256a:	95 95       	asr	r25
    256c:	87 95       	ror	r24
    256e:	98 2f       	mov	r25, r24
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	49 2f       	mov	r20, r25
    2576:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB5_PIN_ID ,READ_PIN(command,5));
    257a:	fe 01       	movw	r30, r28
    257c:	ed 59       	subi	r30, 0x9D	; 157
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	80 72       	andi	r24, 0x20	; 32
    2588:	90 70       	andi	r25, 0x00	; 0
    258a:	95 95       	asr	r25
    258c:	87 95       	ror	r24
    258e:	95 95       	asr	r25
    2590:	87 95       	ror	r24
    2592:	95 95       	asr	r25
    2594:	87 95       	ror	r24
    2596:	95 95       	asr	r25
    2598:	87 95       	ror	r24
    259a:	95 95       	asr	r25
    259c:	87 95       	ror	r24
    259e:	98 2f       	mov	r25, r24
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	64 e0       	ldi	r22, 0x04	; 4
    25a4:	49 2f       	mov	r20, r25
    25a6:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB6_PIN_ID ,READ_PIN(command,6));
    25aa:	fe 01       	movw	r30, r28
    25ac:	ed 59       	subi	r30, 0x9D	; 157
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	80 74       	andi	r24, 0x40	; 64
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	08 2e       	mov	r0, r24
    25bc:	89 2f       	mov	r24, r25
    25be:	00 0c       	add	r0, r0
    25c0:	88 1f       	adc	r24, r24
    25c2:	99 0b       	sbc	r25, r25
    25c4:	00 0c       	add	r0, r0
    25c6:	88 1f       	adc	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	98 2f       	mov	r25, r24
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	65 e0       	ldi	r22, 0x05	; 5
    25d0:	49 2f       	mov	r20, r25
    25d2:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB7_PIN_ID ,READ_PIN(command,7));
    25d6:	fe 01       	movw	r30, r28
    25d8:	ed 59       	subi	r30, 0x9D	; 157
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	98 2f       	mov	r25, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	99 27       	eor	r25, r25
    25e4:	99 1f       	adc	r25, r25
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	66 e0       	ldi	r22, 0x06	; 6
    25ea:	49 2f       	mov	r20, r25
    25ec:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    25f0:	fe 01       	movw	r30, r28
    25f2:	ed 5b       	subi	r30, 0xBD	; 189
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e8       	ldi	r26, 0x80	; 128
    25fc:	bf e3       	ldi	r27, 0x3F	; 63
    25fe:	80 83       	st	Z, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	a2 83       	std	Z+2, r26	; 0x02
    2604:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2606:	8e 01       	movw	r16, r28
    2608:	01 5c       	subi	r16, 0xC1	; 193
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	ed 5b       	subi	r30, 0xBD	; 189
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	55 e4       	ldi	r21, 0x45	; 69
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	f8 01       	movw	r30, r16
    262c:	80 83       	st	Z, r24
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	a2 83       	std	Z+2, r26	; 0x02
    2632:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2634:	fe 01       	movw	r30, r28
    2636:	ff 96       	adiw	r30, 0x3f	; 63
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <LCD_sendCommand+0x418>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9e af       	std	Y+62, r25	; 0x3e
    2656:	8d af       	std	Y+61, r24	; 0x3d
    2658:	46 c0       	rjmp	.+140    	; 0x26e6 <LCD_sendCommand+0x4a4>
	else if (__tmp > 65535)
    265a:	fe 01       	movw	r30, r28
    265c:	ff 96       	adiw	r30, 0x3f	; 63
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2672:	18 16       	cp	r1, r24
    2674:	64 f5       	brge	.+88     	; 0x26ce <LCD_sendCommand+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	fe 01       	movw	r30, r28
    2678:	ed 5b       	subi	r30, 0xBD	; 189
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e af       	std	Y+62, r25	; 0x3e
    26a2:	8d af       	std	Y+61, r24	; 0x3d
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <LCD_sendCommand+0x482>
    26a6:	80 e9       	ldi	r24, 0x90	; 144
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	9c af       	std	Y+60, r25	; 0x3c
    26ac:	8b af       	std	Y+59, r24	; 0x3b
    26ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    26b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_sendCommand+0x470>
    26b6:	9c af       	std	Y+60, r25	; 0x3c
    26b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    26bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9e af       	std	Y+62, r25	; 0x3e
    26c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <LCD_sendCommand+0x464>
    26cc:	16 c0       	rjmp	.+44     	; 0x26fa <LCD_sendCommand+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	fe 01       	movw	r30, r28
    26d0:	ff 96       	adiw	r30, 0x3f	; 63
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e af       	std	Y+62, r25	; 0x3e
    26e4:	8d af       	std	Y+61, r24	; 0x3d
    26e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ea:	9a af       	std	Y+58, r25	; 0x3a
    26ec:	89 af       	std	Y+57, r24	; 0x39
    26ee:	89 ad       	ldd	r24, Y+57	; 0x39
    26f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_sendCommand+0x4b0>
    26f6:	9a af       	std	Y+58, r25	; 0x3a
    26f8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);/*ENABLE=0*/
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	62 e0       	ldi	r22, 0x02	; 2
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e8       	ldi	r26, 0x80	; 128
    270a:	bf e3       	ldi	r27, 0x3F	; 63
    270c:	8d ab       	std	Y+53, r24	; 0x35
    270e:	9e ab       	std	Y+54, r25	; 0x36
    2710:	af ab       	std	Y+55, r26	; 0x37
    2712:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	6d a9       	ldd	r22, Y+53	; 0x35
    2716:	7e a9       	ldd	r23, Y+54	; 0x36
    2718:	8f a9       	ldd	r24, Y+55	; 0x37
    271a:	98 ad       	ldd	r25, Y+56	; 0x38
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a e7       	ldi	r20, 0x7A	; 122
    2722:	55 e4       	ldi	r21, 0x45	; 69
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	89 ab       	std	Y+49, r24	; 0x31
    272e:	9a ab       	std	Y+50, r25	; 0x32
    2730:	ab ab       	std	Y+51, r26	; 0x33
    2732:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2734:	69 a9       	ldd	r22, Y+49	; 0x31
    2736:	7a a9       	ldd	r23, Y+50	; 0x32
    2738:	8b a9       	ldd	r24, Y+51	; 0x33
    273a:	9c a9       	ldd	r25, Y+52	; 0x34
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <LCD_sendCommand+0x514>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	98 ab       	std	Y+48, r25	; 0x30
    2752:	8f a7       	std	Y+47, r24	; 0x2f
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <LCD_sendCommand+0x592>
	else if (__tmp > 65535)
    2756:	69 a9       	ldd	r22, Y+49	; 0x31
    2758:	7a a9       	ldd	r23, Y+50	; 0x32
    275a:	8b a9       	ldd	r24, Y+51	; 0x33
    275c:	9c a9       	ldd	r25, Y+52	; 0x34
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <LCD_sendCommand+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	6d a9       	ldd	r22, Y+53	; 0x35
    2770:	7e a9       	ldd	r23, Y+54	; 0x36
    2772:	8f a9       	ldd	r24, Y+55	; 0x37
    2774:	98 ad       	ldd	r25, Y+56	; 0x38
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	98 ab       	std	Y+48, r25	; 0x30
    2794:	8f a7       	std	Y+47, r24	; 0x2f
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <LCD_sendCommand+0x574>
    2798:	80 e9       	ldi	r24, 0x90	; 144
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	9e a7       	std	Y+46, r25	; 0x2e
    279e:	8d a7       	std	Y+45, r24	; 0x2d
    27a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_sendCommand+0x562>
    27a8:	9e a7       	std	Y+46, r25	; 0x2e
    27aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ae:	98 a9       	ldd	r25, Y+48	; 0x30
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	98 ab       	std	Y+48, r25	; 0x30
    27b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <LCD_sendCommand+0x556>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <LCD_sendCommand+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	69 a9       	ldd	r22, Y+49	; 0x31
    27c2:	7a a9       	ldd	r23, Y+50	; 0x32
    27c4:	8b a9       	ldd	r24, Y+51	; 0x33
    27c6:	9c a9       	ldd	r25, Y+52	; 0x34
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	98 ab       	std	Y+48, r25	; 0x30
    27d2:	8f a7       	std	Y+47, r24	; 0x2f
    27d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d6:	98 a9       	ldd	r25, Y+48	; 0x30
    27d8:	9c a7       	std	Y+44, r25	; 0x2c
    27da:	8b a7       	std	Y+43, r24	; 0x2b
    27dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27de:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_sendCommand+0x59e>
    27e4:	9c a7       	std	Y+44, r25	; 0x2c
    27e6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);/*Tas delay time */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*ENABLE=1*/
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	62 e0       	ldi	r22, 0x02	; 2
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	8f a3       	std	Y+39, r24	; 0x27
    27fc:	98 a7       	std	Y+40, r25	; 0x28
    27fe:	a9 a7       	std	Y+41, r26	; 0x29
    2800:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6f a1       	ldd	r22, Y+39	; 0x27
    2804:	78 a5       	ldd	r23, Y+40	; 0x28
    2806:	89 a5       	ldd	r24, Y+41	; 0x29
    2808:	9a a5       	ldd	r25, Y+42	; 0x2a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	55 e4       	ldi	r21, 0x45	; 69
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8b a3       	std	Y+35, r24	; 0x23
    281c:	9c a3       	std	Y+36, r25	; 0x24
    281e:	ad a3       	std	Y+37, r26	; 0x25
    2820:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2822:	6b a1       	ldd	r22, Y+35	; 0x23
    2824:	7c a1       	ldd	r23, Y+36	; 0x24
    2826:	8d a1       	ldd	r24, Y+37	; 0x25
    2828:	9e a1       	ldd	r25, Y+38	; 0x26
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_sendCommand+0x602>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9a a3       	std	Y+34, r25	; 0x22
    2840:	89 a3       	std	Y+33, r24	; 0x21
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_sendCommand+0x680>
	else if (__tmp > 65535)
    2844:	6b a1       	ldd	r22, Y+35	; 0x23
    2846:	7c a1       	ldd	r23, Y+36	; 0x24
    2848:	8d a1       	ldd	r24, Y+37	; 0x25
    284a:	9e a1       	ldd	r25, Y+38	; 0x26
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_sendCommand+0x66c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6f a1       	ldd	r22, Y+39	; 0x27
    285e:	78 a5       	ldd	r23, Y+40	; 0x28
    2860:	89 a5       	ldd	r24, Y+41	; 0x29
    2862:	9a a5       	ldd	r25, Y+42	; 0x2a
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9a a3       	std	Y+34, r25	; 0x22
    2882:	89 a3       	std	Y+33, r24	; 0x21
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_sendCommand+0x662>
    2886:	80 e9       	ldi	r24, 0x90	; 144
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	98 a3       	std	Y+32, r25	; 0x20
    288c:	8f 8f       	std	Y+31, r24	; 0x1f
    288e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2890:	98 a1       	ldd	r25, Y+32	; 0x20
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_sendCommand+0x650>
    2896:	98 a3       	std	Y+32, r25	; 0x20
    2898:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	89 a1       	ldd	r24, Y+33	; 0x21
    289c:	9a a1       	ldd	r25, Y+34	; 0x22
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9a a3       	std	Y+34, r25	; 0x22
    28a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	89 a1       	ldd	r24, Y+33	; 0x21
    28a6:	9a a1       	ldd	r25, Y+34	; 0x22
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_sendCommand+0x644>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_sendCommand+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6b a1       	ldd	r22, Y+35	; 0x23
    28b0:	7c a1       	ldd	r23, Y+36	; 0x24
    28b2:	8d a1       	ldd	r24, Y+37	; 0x25
    28b4:	9e a1       	ldd	r25, Y+38	; 0x26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9a a3       	std	Y+34, r25	; 0x22
    28c0:	89 a3       	std	Y+33, r24	; 0x21
    28c2:	89 a1       	ldd	r24, Y+33	; 0x21
    28c4:	9a a1       	ldd	r25, Y+34	; 0x22
    28c6:	9e 8f       	std	Y+30, r25	; 0x1e
    28c8:	8d 8f       	std	Y+29, r24	; 0x1d
    28ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_sendCommand+0x68c>
    28d2:	9e 8f       	std	Y+30, r25	; 0x1e
    28d4:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);/*Tpw delay time */

	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB4_PIN_ID ,READ_PIN(command,0));
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 59       	subi	r30, 0x9D	; 157
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	98 2f       	mov	r25, r24
    28e0:	91 70       	andi	r25, 0x01	; 1
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	63 e0       	ldi	r22, 0x03	; 3
    28e6:	49 2f       	mov	r20, r25
    28e8:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB5_PIN_ID ,READ_PIN(command,1));
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 59       	subi	r30, 0x9D	; 157
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	82 70       	andi	r24, 0x02	; 2
    28fa:	90 70       	andi	r25, 0x00	; 0
    28fc:	95 95       	asr	r25
    28fe:	87 95       	ror	r24
    2900:	98 2f       	mov	r25, r24
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	64 e0       	ldi	r22, 0x04	; 4
    2906:	49 2f       	mov	r20, r25
    2908:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB6_PIN_ID ,READ_PIN(command,2));
    290c:	fe 01       	movw	r30, r28
    290e:	ed 59       	subi	r30, 0x9D	; 157
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	84 70       	andi	r24, 0x04	; 4
    291a:	90 70       	andi	r25, 0x00	; 0
    291c:	95 95       	asr	r25
    291e:	87 95       	ror	r24
    2920:	95 95       	asr	r25
    2922:	87 95       	ror	r24
    2924:	98 2f       	mov	r25, r24
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	65 e0       	ldi	r22, 0x05	; 5
    292a:	49 2f       	mov	r20, r25
    292c:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB7_PIN_ID ,READ_PIN(command,3));
    2930:	fe 01       	movw	r30, r28
    2932:	ed 59       	subi	r30, 0x9D	; 157
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	88 70       	andi	r24, 0x08	; 8
    293e:	90 70       	andi	r25, 0x00	; 0
    2940:	95 95       	asr	r25
    2942:	87 95       	ror	r24
    2944:	95 95       	asr	r25
    2946:	87 95       	ror	r24
    2948:	95 95       	asr	r25
    294a:	87 95       	ror	r24
    294c:	98 2f       	mov	r25, r24
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	66 e0       	ldi	r22, 0x06	; 6
    2952:	49 2f       	mov	r20, r25
    2954:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e8       	ldi	r26, 0x80	; 128
    295e:	bf e3       	ldi	r27, 0x3F	; 63
    2960:	89 8f       	std	Y+25, r24	; 0x19
    2962:	9a 8f       	std	Y+26, r25	; 0x1a
    2964:	ab 8f       	std	Y+27, r26	; 0x1b
    2966:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	69 8d       	ldd	r22, Y+25	; 0x19
    296a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a e7       	ldi	r20, 0x7A	; 122
    2976:	55 e4       	ldi	r21, 0x45	; 69
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8d 8b       	std	Y+21, r24	; 0x15
    2982:	9e 8b       	std	Y+22, r25	; 0x16
    2984:	af 8b       	std	Y+23, r26	; 0x17
    2986:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2988:	6d 89       	ldd	r22, Y+21	; 0x15
    298a:	7e 89       	ldd	r23, Y+22	; 0x16
    298c:	8f 89       	ldd	r24, Y+23	; 0x17
    298e:	98 8d       	ldd	r25, Y+24	; 0x18
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <LCD_sendCommand+0x768>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 8b       	std	Y+20, r25	; 0x14
    29a6:	8b 8b       	std	Y+19, r24	; 0x13
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <LCD_sendCommand+0x7e6>
	else if (__tmp > 65535)
    29aa:	6d 89       	ldd	r22, Y+21	; 0x15
    29ac:	7e 89       	ldd	r23, Y+22	; 0x16
    29ae:	8f 89       	ldd	r24, Y+23	; 0x17
    29b0:	98 8d       	ldd	r25, Y+24	; 0x18
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <LCD_sendCommand+0x7d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	69 8d       	ldd	r22, Y+25	; 0x19
    29c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9c 8b       	std	Y+20, r25	; 0x14
    29e8:	8b 8b       	std	Y+19, r24	; 0x13
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <LCD_sendCommand+0x7c8>
    29ec:	80 e9       	ldi	r24, 0x90	; 144
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	9a 8b       	std	Y+18, r25	; 0x12
    29f2:	89 8b       	std	Y+17, r24	; 0x11
    29f4:	89 89       	ldd	r24, Y+17	; 0x11
    29f6:	9a 89       	ldd	r25, Y+18	; 0x12
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_sendCommand+0x7b6>
    29fc:	9a 8b       	std	Y+18, r25	; 0x12
    29fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9c 8b       	std	Y+20, r25	; 0x14
    2a08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <LCD_sendCommand+0x7aa>
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <LCD_sendCommand+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	6d 89       	ldd	r22, Y+21	; 0x15
    2a16:	7e 89       	ldd	r23, Y+22	; 0x16
    2a18:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9c 8b       	std	Y+20, r25	; 0x14
    2a26:	8b 8b       	std	Y+19, r24	; 0x13
    2a28:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2c:	98 8b       	std	Y+16, r25	; 0x10
    2a2e:	8f 87       	std	Y+15, r24	; 0x0f
    2a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a32:	98 89       	ldd	r25, Y+16	; 0x10
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_sendCommand+0x7f2>
    2a38:	98 8b       	std	Y+16, r25	; 0x10
    2a3a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);/*ENABLE=0*/
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	62 e0       	ldi	r22, 0x02	; 2
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e8       	ldi	r26, 0x80	; 128
    2a4c:	bf e3       	ldi	r27, 0x3F	; 63
    2a4e:	8b 87       	std	Y+11, r24	; 0x0b
    2a50:	9c 87       	std	Y+12, r25	; 0x0c
    2a52:	ad 87       	std	Y+13, r26	; 0x0d
    2a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a e7       	ldi	r20, 0x7A	; 122
    2a64:	55 e4       	ldi	r21, 0x45	; 69
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	8f 83       	std	Y+7, r24	; 0x07
    2a70:	98 87       	std	Y+8, r25	; 0x08
    2a72:	a9 87       	std	Y+9, r26	; 0x09
    2a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a76:	6f 81       	ldd	r22, Y+7	; 0x07
    2a78:	78 85       	ldd	r23, Y+8	; 0x08
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e8       	ldi	r20, 0x80	; 128
    2a84:	5f e3       	ldi	r21, 0x3F	; 63
    2a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8a:	88 23       	and	r24, r24
    2a8c:	2c f4       	brge	.+10     	; 0x2a98 <LCD_sendCommand+0x856>
		__ticks = 1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	3f c0       	rjmp	.+126    	; 0x2b16 <LCD_sendCommand+0x8d4>
	else if (__tmp > 65535)
    2a98:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9a:	78 85       	ldd	r23, Y+8	; 0x08
    2a9c:	89 85       	ldd	r24, Y+9	; 0x09
    2a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	3f ef       	ldi	r19, 0xFF	; 255
    2aa4:	4f e7       	ldi	r20, 0x7F	; 127
    2aa6:	57 e4       	ldi	r21, 0x47	; 71
    2aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aac:	18 16       	cp	r1, r24
    2aae:	4c f5       	brge	.+82     	; 0x2b02 <LCD_sendCommand+0x8c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e2       	ldi	r20, 0x20	; 32
    2abe:	51 e4       	ldi	r21, 0x41	; 65
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9e 83       	std	Y+6, r25	; 0x06
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
    2ad8:	0f c0       	rjmp	.+30     	; 0x2af8 <LCD_sendCommand+0x8b6>
    2ada:	80 e9       	ldi	r24, 0x90	; 144
    2adc:	91 e0       	ldi	r25, 0x01	; 1
    2ade:	9c 83       	std	Y+4, r25	; 0x04
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <LCD_sendCommand+0x8a4>
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aee:	8d 81       	ldd	r24, Y+5	; 0x05
    2af0:	9e 81       	ldd	r25, Y+6	; 0x06
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	69 f7       	brne	.-38     	; 0x2ada <LCD_sendCommand+0x898>
    2b00:	14 c0       	rjmp	.+40     	; 0x2b2a <LCD_sendCommand+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	9e 83       	std	Y+6, r25	; 0x06
    2b14:	8d 83       	std	Y+5, r24	; 0x05
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <LCD_sendCommand+0x8e0>
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DB_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    2b2a:	cd 59       	subi	r28, 0x9D	; 157
    2b2c:	df 4f       	sbci	r29, 0xFF	; 255
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	08 95       	ret

00002b42 <LCD_sendCharacter>:
 *  it on 2 steps from MSB to LSB and deal with it as writing 2
 *   commands so disable then enable then disable again )
 * 6.enable =0
 * 7.delay 1ms
 */
void LCD_sendCharacter(uint8 command){
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	c3 56       	subi	r28, 0x63	; 99
    2b50:	d0 40       	sbci	r29, 0x00	; 0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ed 59       	subi	r30, 0x9D	; 157
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);/*RS=1*/
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	41 e0       	ldi	r20, 0x01	; 1
    2b6a:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);/*ENABLE=0*/
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	62 e0       	ldi	r22, 0x02	; 2
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e1 5a       	subi	r30, 0xA1	; 161
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a0 e8       	ldi	r26, 0x80	; 128
    2b84:	bf e3       	ldi	r27, 0x3F	; 63
    2b86:	80 83       	st	Z, r24
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	a2 83       	std	Z+2, r26	; 0x02
    2b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8e:	8e 01       	movw	r16, r28
    2b90:	05 5a       	subi	r16, 0xA5	; 165
    2b92:	1f 4f       	sbci	r17, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	e1 5a       	subi	r30, 0xA1	; 161
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a e7       	ldi	r20, 0x7A	; 122
    2ba8:	55 e4       	ldi	r21, 0x45	; 69
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e5 5a       	subi	r30, 0xA5	; 165
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	60 81       	ld	r22, Z
    2bc4:	71 81       	ldd	r23, Z+1	; 0x01
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	44 f4       	brge	.+16     	; 0x2bea <LCD_sendCharacter+0xa8>
		__ticks = 1;
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e7 5a       	subi	r30, 0xA7	; 167
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
    2be8:	64 c0       	rjmp	.+200    	; 0x2cb2 <LCD_sendCharacter+0x170>
	else if (__tmp > 65535)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5a       	subi	r30, 0xA5	; 165
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	3f ef       	ldi	r19, 0xFF	; 255
    2bfc:	4f e7       	ldi	r20, 0x7F	; 127
    2bfe:	57 e4       	ldi	r21, 0x47	; 71
    2c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c04:	18 16       	cp	r1, r24
    2c06:	0c f0       	brlt	.+2      	; 0x2c0a <LCD_sendCharacter+0xc8>
    2c08:	43 c0       	rjmp	.+134    	; 0x2c90 <LCD_sendCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e1 5a       	subi	r30, 0xA1	; 161
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e2       	ldi	r20, 0x20	; 32
    2c1e:	51 e4       	ldi	r21, 0x41	; 65
    2c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	8e 01       	movw	r16, r28
    2c2a:	07 5a       	subi	r16, 0xA7	; 167
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
    2c40:	1f c0       	rjmp	.+62     	; 0x2c80 <LCD_sendCharacter+0x13e>
    2c42:	fe 01       	movw	r30, r28
    2c44:	e9 5a       	subi	r30, 0xA9	; 169
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 e9       	ldi	r24, 0x90	; 144
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	91 83       	std	Z+1, r25	; 0x01
    2c4e:	80 83       	st	Z, r24
    2c50:	fe 01       	movw	r30, r28
    2c52:	e9 5a       	subi	r30, 0xA9	; 169
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_sendCharacter+0x118>
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e9 5a       	subi	r30, 0xA9	; 169
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	de 01       	movw	r26, r28
    2c6a:	a7 5a       	subi	r26, 0xA7	; 167
    2c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e7 5a       	subi	r30, 0xA7	; 167
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	11 96       	adiw	r26, 0x01	; 1
    2c7c:	9c 93       	st	X, r25
    2c7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	fe 01       	movw	r30, r28
    2c82:	e7 5a       	subi	r30, 0xA7	; 167
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	d1 f6       	brne	.-76     	; 0x2c42 <LCD_sendCharacter+0x100>
    2c8e:	27 c0       	rjmp	.+78     	; 0x2cde <LCD_sendCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	8e 01       	movw	r16, r28
    2c92:	07 5a       	subi	r16, 0xA7	; 167
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	e5 5a       	subi	r30, 0xA5	; 165
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	f8 01       	movw	r30, r16
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	de 01       	movw	r26, r28
    2cb4:	ab 5a       	subi	r26, 0xAB	; 171
    2cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e7 5a       	subi	r30, 0xA7	; 167
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	91 81       	ldd	r25, Z+1	; 0x01
    2cc2:	8d 93       	st	X+, r24
    2cc4:	9c 93       	st	X, r25
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	eb 5a       	subi	r30, 0xAB	; 171
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_sendCharacter+0x18e>
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	eb 5a       	subi	r30, 0xAB	; 171
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24

	_delay_ms(1);/*Tas delay time */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*ENABLE=1*/
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	62 e0       	ldi	r22, 0x02	; 2
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ef 5a       	subi	r30, 0xAF	; 175
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a0 e8       	ldi	r26, 0x80	; 128
    2cf4:	bf e3       	ldi	r27, 0x3F	; 63
    2cf6:	80 83       	st	Z, r24
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	a2 83       	std	Z+2, r26	; 0x02
    2cfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	8e 01       	movw	r16, r28
    2d00:	03 5b       	subi	r16, 0xB3	; 179
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	ef 5a       	subi	r30, 0xAF	; 175
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a e7       	ldi	r20, 0x7A	; 122
    2d18:	55 e4       	ldi	r21, 0x45	; 69
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	f8 01       	movw	r30, r16
    2d24:	80 83       	st	Z, r24
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	a2 83       	std	Z+2, r26	; 0x02
    2d2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e3 5b       	subi	r30, 0xB3	; 179
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	44 f4       	brge	.+16     	; 0x2d5a <LCD_sendCharacter+0x218>
		__ticks = 1;
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e5 5b       	subi	r30, 0xB5	; 181
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
    2d58:	64 c0       	rjmp	.+200    	; 0x2e22 <LCD_sendCharacter+0x2e0>
	else if (__tmp > 65535)
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e3 5b       	subi	r30, 0xB3	; 179
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	0c f0       	brlt	.+2      	; 0x2d7a <LCD_sendCharacter+0x238>
    2d78:	43 c0       	rjmp	.+134    	; 0x2e00 <LCD_sendCharacter+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ef 5a       	subi	r30, 0xAF	; 175
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e2       	ldi	r20, 0x20	; 32
    2d8e:	51 e4       	ldi	r21, 0x41	; 65
    2d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	8e 01       	movw	r16, r28
    2d9a:	05 5b       	subi	r16, 0xB5	; 181
    2d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	f8 01       	movw	r30, r16
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    2db0:	1f c0       	rjmp	.+62     	; 0x2df0 <LCD_sendCharacter+0x2ae>
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 5b       	subi	r30, 0xB7	; 183
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 e9       	ldi	r24, 0x90	; 144
    2dba:	91 e0       	ldi	r25, 0x01	; 1
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	80 83       	st	Z, r24
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e7 5b       	subi	r30, 0xB7	; 183
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <LCD_sendCharacter+0x288>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e7 5b       	subi	r30, 0xB7	; 183
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	de 01       	movw	r26, r28
    2dda:	a5 5b       	subi	r26, 0xB5	; 181
    2ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dde:	fe 01       	movw	r30, r28
    2de0:	e5 5b       	subi	r30, 0xB5	; 181
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	11 96       	adiw	r26, 0x01	; 1
    2dec:	9c 93       	st	X, r25
    2dee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df0:	fe 01       	movw	r30, r28
    2df2:	e5 5b       	subi	r30, 0xB5	; 181
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	d1 f6       	brne	.-76     	; 0x2db2 <LCD_sendCharacter+0x270>
    2dfe:	27 c0       	rjmp	.+78     	; 0x2e4e <LCD_sendCharacter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e00:	8e 01       	movw	r16, r28
    2e02:	05 5b       	subi	r16, 0xB5	; 181
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	e3 5b       	subi	r30, 0xB3	; 179
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
    2e22:	de 01       	movw	r26, r28
    2e24:	a9 5b       	subi	r26, 0xB9	; 185
    2e26:	bf 4f       	sbci	r27, 0xFF	; 255
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e5 5b       	subi	r30, 0xB5	; 181
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	8d 93       	st	X+, r24
    2e34:	9c 93       	st	X, r25
    2e36:	fe 01       	movw	r30, r28
    2e38:	e9 5b       	subi	r30, 0xB9	; 185
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	91 81       	ldd	r25, Z+1	; 0x01
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <LCD_sendCharacter+0x2fe>
    2e44:	fe 01       	movw	r30, r28
    2e46:	e9 5b       	subi	r30, 0xB9	; 185
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	80 83       	st	Z, r24
	_delay_ms(1);/*Tpw delay time */

/* configurations to write command on 2 steps in case of 4 bits mood */
	#if(LCD_DATA_BITS_MODE==4)
	/*take the MSB (4_bits) */
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB4_PIN_ID ,READ_PIN(command,4));
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ed 59       	subi	r30, 0x9D	; 157
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	80 71       	andi	r24, 0x10	; 16
    2e5c:	90 70       	andi	r25, 0x00	; 0
    2e5e:	95 95       	asr	r25
    2e60:	87 95       	ror	r24
    2e62:	95 95       	asr	r25
    2e64:	87 95       	ror	r24
    2e66:	95 95       	asr	r25
    2e68:	87 95       	ror	r24
    2e6a:	95 95       	asr	r25
    2e6c:	87 95       	ror	r24
    2e6e:	98 2f       	mov	r25, r24
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	63 e0       	ldi	r22, 0x03	; 3
    2e74:	49 2f       	mov	r20, r25
    2e76:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB5_PIN_ID ,READ_PIN(command,5));
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	ed 59       	subi	r30, 0x9D	; 157
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 81       	ld	r24, Z
    2e82:	88 2f       	mov	r24, r24
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	80 72       	andi	r24, 0x20	; 32
    2e88:	90 70       	andi	r25, 0x00	; 0
    2e8a:	95 95       	asr	r25
    2e8c:	87 95       	ror	r24
    2e8e:	95 95       	asr	r25
    2e90:	87 95       	ror	r24
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	95 95       	asr	r25
    2e9c:	87 95       	ror	r24
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	64 e0       	ldi	r22, 0x04	; 4
    2ea4:	49 2f       	mov	r20, r25
    2ea6:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB6_PIN_ID ,READ_PIN(command,6));
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ed 59       	subi	r30, 0x9D	; 157
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	88 2f       	mov	r24, r24
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	80 74       	andi	r24, 0x40	; 64
    2eb8:	90 70       	andi	r25, 0x00	; 0
    2eba:	08 2e       	mov	r0, r24
    2ebc:	89 2f       	mov	r24, r25
    2ebe:	00 0c       	add	r0, r0
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	99 0b       	sbc	r25, r25
    2ec4:	00 0c       	add	r0, r0
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	98 2f       	mov	r25, r24
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	65 e0       	ldi	r22, 0x05	; 5
    2ed0:	49 2f       	mov	r20, r25
    2ed2:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB7_PIN_ID ,READ_PIN(command,7));
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ed 59       	subi	r30, 0x9D	; 157
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	98 2f       	mov	r25, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	99 27       	eor	r25, r25
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	66 e0       	ldi	r22, 0x06	; 6
    2eea:	49 2f       	mov	r20, r25
    2eec:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	ed 5b       	subi	r30, 0xBD	; 189
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	a0 e8       	ldi	r26, 0x80	; 128
    2efc:	bf e3       	ldi	r27, 0x3F	; 63
    2efe:	80 83       	st	Z, r24
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	a2 83       	std	Z+2, r26	; 0x02
    2f04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f06:	8e 01       	movw	r16, r28
    2f08:	01 5c       	subi	r16, 0xC1	; 193
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	ed 5b       	subi	r30, 0xBD	; 189
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	4a e7       	ldi	r20, 0x7A	; 122
    2f20:	55 e4       	ldi	r21, 0x45	; 69
    2f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	80 83       	st	Z, r24
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	a2 83       	std	Z+2, r26	; 0x02
    2f32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f34:	fe 01       	movw	r30, r28
    2f36:	ff 96       	adiw	r30, 0x3f	; 63
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <LCD_sendCharacter+0x418>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9e af       	std	Y+62, r25	; 0x3e
    2f56:	8d af       	std	Y+61, r24	; 0x3d
    2f58:	46 c0       	rjmp	.+140    	; 0x2fe6 <LCD_sendCharacter+0x4a4>
	else if (__tmp > 65535)
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ff 96       	adiw	r30, 0x3f	; 63
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	3f ef       	ldi	r19, 0xFF	; 255
    2f6a:	4f e7       	ldi	r20, 0x7F	; 127
    2f6c:	57 e4       	ldi	r21, 0x47	; 71
    2f6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f72:	18 16       	cp	r1, r24
    2f74:	64 f5       	brge	.+88     	; 0x2fce <LCD_sendCharacter+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f76:	fe 01       	movw	r30, r28
    2f78:	ed 5b       	subi	r30, 0xBD	; 189
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	60 81       	ld	r22, Z
    2f7e:	71 81       	ldd	r23, Z+1	; 0x01
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e2       	ldi	r20, 0x20	; 32
    2f8a:	51 e4       	ldi	r21, 0x41	; 65
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9e af       	std	Y+62, r25	; 0x3e
    2fa2:	8d af       	std	Y+61, r24	; 0x3d
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <LCD_sendCharacter+0x482>
    2fa6:	80 e9       	ldi	r24, 0x90	; 144
    2fa8:	91 e0       	ldi	r25, 0x01	; 1
    2faa:	9c af       	std	Y+60, r25	; 0x3c
    2fac:	8b af       	std	Y+59, r24	; 0x3b
    2fae:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <LCD_sendCharacter+0x470>
    2fb6:	9c af       	std	Y+60, r25	; 0x3c
    2fb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	9e af       	std	Y+62, r25	; 0x3e
    2fc2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	69 f7       	brne	.-38     	; 0x2fa6 <LCD_sendCharacter+0x464>
    2fcc:	16 c0       	rjmp	.+44     	; 0x2ffa <LCD_sendCharacter+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fce:	fe 01       	movw	r30, r28
    2fd0:	ff 96       	adiw	r30, 0x3f	; 63
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e af       	std	Y+62, r25	; 0x3e
    2fe4:	8d af       	std	Y+61, r24	; 0x3d
    2fe6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fea:	9a af       	std	Y+58, r25	; 0x3a
    2fec:	89 af       	std	Y+57, r24	; 0x39
    2fee:	89 ad       	ldd	r24, Y+57	; 0x39
    2ff0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_sendCharacter+0x4b0>
    2ff6:	9a af       	std	Y+58, r25	; 0x3a
    2ff8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);/*ENABLE=0*/
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	62 e0       	ldi	r22, 0x02	; 2
    2ffe:	40 e0       	ldi	r20, 0x00	; 0
    3000:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	a0 e8       	ldi	r26, 0x80	; 128
    300a:	bf e3       	ldi	r27, 0x3F	; 63
    300c:	8d ab       	std	Y+53, r24	; 0x35
    300e:	9e ab       	std	Y+54, r25	; 0x36
    3010:	af ab       	std	Y+55, r26	; 0x37
    3012:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3014:	6d a9       	ldd	r22, Y+53	; 0x35
    3016:	7e a9       	ldd	r23, Y+54	; 0x36
    3018:	8f a9       	ldd	r24, Y+55	; 0x37
    301a:	98 ad       	ldd	r25, Y+56	; 0x38
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	4a e7       	ldi	r20, 0x7A	; 122
    3022:	55 e4       	ldi	r21, 0x45	; 69
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	89 ab       	std	Y+49, r24	; 0x31
    302e:	9a ab       	std	Y+50, r25	; 0x32
    3030:	ab ab       	std	Y+51, r26	; 0x33
    3032:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3034:	69 a9       	ldd	r22, Y+49	; 0x31
    3036:	7a a9       	ldd	r23, Y+50	; 0x32
    3038:	8b a9       	ldd	r24, Y+51	; 0x33
    303a:	9c a9       	ldd	r25, Y+52	; 0x34
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e8       	ldi	r20, 0x80	; 128
    3042:	5f e3       	ldi	r21, 0x3F	; 63
    3044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3048:	88 23       	and	r24, r24
    304a:	2c f4       	brge	.+10     	; 0x3056 <LCD_sendCharacter+0x514>
		__ticks = 1;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	98 ab       	std	Y+48, r25	; 0x30
    3052:	8f a7       	std	Y+47, r24	; 0x2f
    3054:	3f c0       	rjmp	.+126    	; 0x30d4 <LCD_sendCharacter+0x592>
	else if (__tmp > 65535)
    3056:	69 a9       	ldd	r22, Y+49	; 0x31
    3058:	7a a9       	ldd	r23, Y+50	; 0x32
    305a:	8b a9       	ldd	r24, Y+51	; 0x33
    305c:	9c a9       	ldd	r25, Y+52	; 0x34
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	57 e4       	ldi	r21, 0x47	; 71
    3066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    306a:	18 16       	cp	r1, r24
    306c:	4c f5       	brge	.+82     	; 0x30c0 <LCD_sendCharacter+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306e:	6d a9       	ldd	r22, Y+53	; 0x35
    3070:	7e a9       	ldd	r23, Y+54	; 0x36
    3072:	8f a9       	ldd	r24, Y+55	; 0x37
    3074:	98 ad       	ldd	r25, Y+56	; 0x38
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e2       	ldi	r20, 0x20	; 32
    307c:	51 e4       	ldi	r21, 0x41	; 65
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	98 ab       	std	Y+48, r25	; 0x30
    3094:	8f a7       	std	Y+47, r24	; 0x2f
    3096:	0f c0       	rjmp	.+30     	; 0x30b6 <LCD_sendCharacter+0x574>
    3098:	80 e9       	ldi	r24, 0x90	; 144
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	9e a7       	std	Y+46, r25	; 0x2e
    309e:	8d a7       	std	Y+45, r24	; 0x2d
    30a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    30a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <LCD_sendCharacter+0x562>
    30a8:	9e a7       	std	Y+46, r25	; 0x2e
    30aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ae:	98 a9       	ldd	r25, Y+48	; 0x30
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	98 ab       	std	Y+48, r25	; 0x30
    30b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b8:	98 a9       	ldd	r25, Y+48	; 0x30
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	69 f7       	brne	.-38     	; 0x3098 <LCD_sendCharacter+0x556>
    30be:	14 c0       	rjmp	.+40     	; 0x30e8 <LCD_sendCharacter+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c0:	69 a9       	ldd	r22, Y+49	; 0x31
    30c2:	7a a9       	ldd	r23, Y+50	; 0x32
    30c4:	8b a9       	ldd	r24, Y+51	; 0x33
    30c6:	9c a9       	ldd	r25, Y+52	; 0x34
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	98 ab       	std	Y+48, r25	; 0x30
    30d2:	8f a7       	std	Y+47, r24	; 0x2f
    30d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d6:	98 a9       	ldd	r25, Y+48	; 0x30
    30d8:	9c a7       	std	Y+44, r25	; 0x2c
    30da:	8b a7       	std	Y+43, r24	; 0x2b
    30dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    30de:	9c a5       	ldd	r25, Y+44	; 0x2c
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <LCD_sendCharacter+0x59e>
    30e4:	9c a7       	std	Y+44, r25	; 0x2c
    30e6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);/*Tas delay time */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*ENABLE=1*/
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	62 e0       	ldi	r22, 0x02	; 2
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e8       	ldi	r26, 0x80	; 128
    30f8:	bf e3       	ldi	r27, 0x3F	; 63
    30fa:	8f a3       	std	Y+39, r24	; 0x27
    30fc:	98 a7       	std	Y+40, r25	; 0x28
    30fe:	a9 a7       	std	Y+41, r26	; 0x29
    3100:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3102:	6f a1       	ldd	r22, Y+39	; 0x27
    3104:	78 a5       	ldd	r23, Y+40	; 0x28
    3106:	89 a5       	ldd	r24, Y+41	; 0x29
    3108:	9a a5       	ldd	r25, Y+42	; 0x2a
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a e7       	ldi	r20, 0x7A	; 122
    3110:	55 e4       	ldi	r21, 0x45	; 69
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8b a3       	std	Y+35, r24	; 0x23
    311c:	9c a3       	std	Y+36, r25	; 0x24
    311e:	ad a3       	std	Y+37, r26	; 0x25
    3120:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3122:	6b a1       	ldd	r22, Y+35	; 0x23
    3124:	7c a1       	ldd	r23, Y+36	; 0x24
    3126:	8d a1       	ldd	r24, Y+37	; 0x25
    3128:	9e a1       	ldd	r25, Y+38	; 0x26
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <LCD_sendCharacter+0x602>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9a a3       	std	Y+34, r25	; 0x22
    3140:	89 a3       	std	Y+33, r24	; 0x21
    3142:	3f c0       	rjmp	.+126    	; 0x31c2 <LCD_sendCharacter+0x680>
	else if (__tmp > 65535)
    3144:	6b a1       	ldd	r22, Y+35	; 0x23
    3146:	7c a1       	ldd	r23, Y+36	; 0x24
    3148:	8d a1       	ldd	r24, Y+37	; 0x25
    314a:	9e a1       	ldd	r25, Y+38	; 0x26
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	3f ef       	ldi	r19, 0xFF	; 255
    3150:	4f e7       	ldi	r20, 0x7F	; 127
    3152:	57 e4       	ldi	r21, 0x47	; 71
    3154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3158:	18 16       	cp	r1, r24
    315a:	4c f5       	brge	.+82     	; 0x31ae <LCD_sendCharacter+0x66c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315c:	6f a1       	ldd	r22, Y+39	; 0x27
    315e:	78 a5       	ldd	r23, Y+40	; 0x28
    3160:	89 a5       	ldd	r24, Y+41	; 0x29
    3162:	9a a5       	ldd	r25, Y+42	; 0x2a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9a a3       	std	Y+34, r25	; 0x22
    3182:	89 a3       	std	Y+33, r24	; 0x21
    3184:	0f c0       	rjmp	.+30     	; 0x31a4 <LCD_sendCharacter+0x662>
    3186:	80 e9       	ldi	r24, 0x90	; 144
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	98 a3       	std	Y+32, r25	; 0x20
    318c:	8f 8f       	std	Y+31, r24	; 0x1f
    318e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3190:	98 a1       	ldd	r25, Y+32	; 0x20
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_sendCharacter+0x650>
    3196:	98 a3       	std	Y+32, r25	; 0x20
    3198:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	89 a1       	ldd	r24, Y+33	; 0x21
    319c:	9a a1       	ldd	r25, Y+34	; 0x22
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	9a a3       	std	Y+34, r25	; 0x22
    31a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a4:	89 a1       	ldd	r24, Y+33	; 0x21
    31a6:	9a a1       	ldd	r25, Y+34	; 0x22
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	69 f7       	brne	.-38     	; 0x3186 <LCD_sendCharacter+0x644>
    31ac:	14 c0       	rjmp	.+40     	; 0x31d6 <LCD_sendCharacter+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ae:	6b a1       	ldd	r22, Y+35	; 0x23
    31b0:	7c a1       	ldd	r23, Y+36	; 0x24
    31b2:	8d a1       	ldd	r24, Y+37	; 0x25
    31b4:	9e a1       	ldd	r25, Y+38	; 0x26
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9a a3       	std	Y+34, r25	; 0x22
    31c0:	89 a3       	std	Y+33, r24	; 0x21
    31c2:	89 a1       	ldd	r24, Y+33	; 0x21
    31c4:	9a a1       	ldd	r25, Y+34	; 0x22
    31c6:	9e 8f       	std	Y+30, r25	; 0x1e
    31c8:	8d 8f       	std	Y+29, r24	; 0x1d
    31ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_sendCharacter+0x68c>
    31d2:	9e 8f       	std	Y+30, r25	; 0x1e
    31d4:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);/*Tpw delay time */

	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB4_PIN_ID ,READ_PIN(command,0));
    31d6:	fe 01       	movw	r30, r28
    31d8:	ed 59       	subi	r30, 0x9D	; 157
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	98 2f       	mov	r25, r24
    31e0:	91 70       	andi	r25, 0x01	; 1
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	63 e0       	ldi	r22, 0x03	; 3
    31e6:	49 2f       	mov	r20, r25
    31e8:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB5_PIN_ID ,READ_PIN(command,1));
    31ec:	fe 01       	movw	r30, r28
    31ee:	ed 59       	subi	r30, 0x9D	; 157
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	80 81       	ld	r24, Z
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	82 70       	andi	r24, 0x02	; 2
    31fa:	90 70       	andi	r25, 0x00	; 0
    31fc:	95 95       	asr	r25
    31fe:	87 95       	ror	r24
    3200:	98 2f       	mov	r25, r24
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	64 e0       	ldi	r22, 0x04	; 4
    3206:	49 2f       	mov	r20, r25
    3208:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB6_PIN_ID ,READ_PIN(command,2));
    320c:	fe 01       	movw	r30, r28
    320e:	ed 59       	subi	r30, 0x9D	; 157
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	84 70       	andi	r24, 0x04	; 4
    321a:	90 70       	andi	r25, 0x00	; 0
    321c:	95 95       	asr	r25
    321e:	87 95       	ror	r24
    3220:	95 95       	asr	r25
    3222:	87 95       	ror	r24
    3224:	98 2f       	mov	r25, r24
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	65 e0       	ldi	r22, 0x05	; 5
    322a:	49 2f       	mov	r20, r25
    322c:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID,LCD_DB7_PIN_ID ,READ_PIN(command,3));
    3230:	fe 01       	movw	r30, r28
    3232:	ed 59       	subi	r30, 0x9D	; 157
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	80 81       	ld	r24, Z
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	88 70       	andi	r24, 0x08	; 8
    323e:	90 70       	andi	r25, 0x00	; 0
    3240:	95 95       	asr	r25
    3242:	87 95       	ror	r24
    3244:	95 95       	asr	r25
    3246:	87 95       	ror	r24
    3248:	95 95       	asr	r25
    324a:	87 95       	ror	r24
    324c:	98 2f       	mov	r25, r24
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	66 e0       	ldi	r22, 0x06	; 6
    3252:	49 2f       	mov	r20, r25
    3254:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	a0 e8       	ldi	r26, 0x80	; 128
    325e:	bf e3       	ldi	r27, 0x3F	; 63
    3260:	89 8f       	std	Y+25, r24	; 0x19
    3262:	9a 8f       	std	Y+26, r25	; 0x1a
    3264:	ab 8f       	std	Y+27, r26	; 0x1b
    3266:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3268:	69 8d       	ldd	r22, Y+25	; 0x19
    326a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    326c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    326e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	4a e7       	ldi	r20, 0x7A	; 122
    3276:	55 e4       	ldi	r21, 0x45	; 69
    3278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	8d 8b       	std	Y+21, r24	; 0x15
    3282:	9e 8b       	std	Y+22, r25	; 0x16
    3284:	af 8b       	std	Y+23, r26	; 0x17
    3286:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3288:	6d 89       	ldd	r22, Y+21	; 0x15
    328a:	7e 89       	ldd	r23, Y+22	; 0x16
    328c:	8f 89       	ldd	r24, Y+23	; 0x17
    328e:	98 8d       	ldd	r25, Y+24	; 0x18
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	40 e8       	ldi	r20, 0x80	; 128
    3296:	5f e3       	ldi	r21, 0x3F	; 63
    3298:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    329c:	88 23       	and	r24, r24
    329e:	2c f4       	brge	.+10     	; 0x32aa <LCD_sendCharacter+0x768>
		__ticks = 1;
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	9c 8b       	std	Y+20, r25	; 0x14
    32a6:	8b 8b       	std	Y+19, r24	; 0x13
    32a8:	3f c0       	rjmp	.+126    	; 0x3328 <LCD_sendCharacter+0x7e6>
	else if (__tmp > 65535)
    32aa:	6d 89       	ldd	r22, Y+21	; 0x15
    32ac:	7e 89       	ldd	r23, Y+22	; 0x16
    32ae:	8f 89       	ldd	r24, Y+23	; 0x17
    32b0:	98 8d       	ldd	r25, Y+24	; 0x18
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	3f ef       	ldi	r19, 0xFF	; 255
    32b6:	4f e7       	ldi	r20, 0x7F	; 127
    32b8:	57 e4       	ldi	r21, 0x47	; 71
    32ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32be:	18 16       	cp	r1, r24
    32c0:	4c f5       	brge	.+82     	; 0x3314 <LCD_sendCharacter+0x7d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c2:	69 8d       	ldd	r22, Y+25	; 0x19
    32c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e2       	ldi	r20, 0x20	; 32
    32d0:	51 e4       	ldi	r21, 0x41	; 65
    32d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	9c 8b       	std	Y+20, r25	; 0x14
    32e8:	8b 8b       	std	Y+19, r24	; 0x13
    32ea:	0f c0       	rjmp	.+30     	; 0x330a <LCD_sendCharacter+0x7c8>
    32ec:	80 e9       	ldi	r24, 0x90	; 144
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	9a 8b       	std	Y+18, r25	; 0x12
    32f2:	89 8b       	std	Y+17, r24	; 0x11
    32f4:	89 89       	ldd	r24, Y+17	; 0x11
    32f6:	9a 89       	ldd	r25, Y+18	; 0x12
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <LCD_sendCharacter+0x7b6>
    32fc:	9a 8b       	std	Y+18, r25	; 0x12
    32fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3300:	8b 89       	ldd	r24, Y+19	; 0x13
    3302:	9c 89       	ldd	r25, Y+20	; 0x14
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	9c 8b       	std	Y+20, r25	; 0x14
    3308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330a:	8b 89       	ldd	r24, Y+19	; 0x13
    330c:	9c 89       	ldd	r25, Y+20	; 0x14
    330e:	00 97       	sbiw	r24, 0x00	; 0
    3310:	69 f7       	brne	.-38     	; 0x32ec <LCD_sendCharacter+0x7aa>
    3312:	14 c0       	rjmp	.+40     	; 0x333c <LCD_sendCharacter+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3314:	6d 89       	ldd	r22, Y+21	; 0x15
    3316:	7e 89       	ldd	r23, Y+22	; 0x16
    3318:	8f 89       	ldd	r24, Y+23	; 0x17
    331a:	98 8d       	ldd	r25, Y+24	; 0x18
    331c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	9c 8b       	std	Y+20, r25	; 0x14
    3326:	8b 8b       	std	Y+19, r24	; 0x13
    3328:	8b 89       	ldd	r24, Y+19	; 0x13
    332a:	9c 89       	ldd	r25, Y+20	; 0x14
    332c:	98 8b       	std	Y+16, r25	; 0x10
    332e:	8f 87       	std	Y+15, r24	; 0x0f
    3330:	8f 85       	ldd	r24, Y+15	; 0x0f
    3332:	98 89       	ldd	r25, Y+16	; 0x10
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <LCD_sendCharacter+0x7f2>
    3338:	98 8b       	std	Y+16, r25	; 0x10
    333a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);/*ENABLE=0*/
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	62 e0       	ldi	r22, 0x02	; 2
    3340:	40 e0       	ldi	r20, 0x00	; 0
    3342:	0e 94 88 0c 	call	0x1910	; 0x1910 <GPIO_writePin>
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	a0 e8       	ldi	r26, 0x80	; 128
    334c:	bf e3       	ldi	r27, 0x3F	; 63
    334e:	8b 87       	std	Y+11, r24	; 0x0b
    3350:	9c 87       	std	Y+12, r25	; 0x0c
    3352:	ad 87       	std	Y+13, r26	; 0x0d
    3354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3356:	6b 85       	ldd	r22, Y+11	; 0x0b
    3358:	7c 85       	ldd	r23, Y+12	; 0x0c
    335a:	8d 85       	ldd	r24, Y+13	; 0x0d
    335c:	9e 85       	ldd	r25, Y+14	; 0x0e
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	4a e7       	ldi	r20, 0x7A	; 122
    3364:	55 e4       	ldi	r21, 0x45	; 69
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8f 83       	std	Y+7, r24	; 0x07
    3370:	98 87       	std	Y+8, r25	; 0x08
    3372:	a9 87       	std	Y+9, r26	; 0x09
    3374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3376:	6f 81       	ldd	r22, Y+7	; 0x07
    3378:	78 85       	ldd	r23, Y+8	; 0x08
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e8       	ldi	r20, 0x80	; 128
    3384:	5f e3       	ldi	r21, 0x3F	; 63
    3386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    338a:	88 23       	and	r24, r24
    338c:	2c f4       	brge	.+10     	; 0x3398 <LCD_sendCharacter+0x856>
		__ticks = 1;
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	3f c0       	rjmp	.+126    	; 0x3416 <LCD_sendCharacter+0x8d4>
	else if (__tmp > 65535)
    3398:	6f 81       	ldd	r22, Y+7	; 0x07
    339a:	78 85       	ldd	r23, Y+8	; 0x08
    339c:	89 85       	ldd	r24, Y+9	; 0x09
    339e:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	3f ef       	ldi	r19, 0xFF	; 255
    33a4:	4f e7       	ldi	r20, 0x7F	; 127
    33a6:	57 e4       	ldi	r21, 0x47	; 71
    33a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ac:	18 16       	cp	r1, r24
    33ae:	4c f5       	brge	.+82     	; 0x3402 <LCD_sendCharacter+0x8c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	51 e4       	ldi	r21, 0x41	; 65
    33c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
    33d8:	0f c0       	rjmp	.+30     	; 0x33f8 <LCD_sendCharacter+0x8b6>
    33da:	80 e9       	ldi	r24, 0x90	; 144
    33dc:	91 e0       	ldi	r25, 0x01	; 1
    33de:	9c 83       	std	Y+4, r25	; 0x04
    33e0:	8b 83       	std	Y+3, r24	; 0x03
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	9c 81       	ldd	r25, Y+4	; 0x04
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_sendCharacter+0x8a4>
    33ea:	9c 83       	std	Y+4, r25	; 0x04
    33ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	69 f7       	brne	.-38     	; 0x33da <LCD_sendCharacter+0x898>
    3400:	14 c0       	rjmp	.+40     	; 0x342a <LCD_sendCharacter+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3402:	6f 81       	ldd	r22, Y+7	; 0x07
    3404:	78 85       	ldd	r23, Y+8	; 0x08
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	9a 83       	std	Y+2, r25	; 0x02
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <LCD_sendCharacter+0x8e0>
    3426:	9a 83       	std	Y+2, r25	; 0x02
    3428:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DB_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    342a:	cd 59       	subi	r28, 0x9D	; 157
    342c:	df 4f       	sbci	r29, 0xFF	; 255
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	08 95       	ret

00003442 <LCD_displayString>:

/*description :
 * write a string as an array of characters
 */
void LCD_displayString(const char*str){
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	00 d0       	rcall	.+0      	; 0x3448 <LCD_displayString+0x6>
    3448:	0f 92       	push	r0
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	9b 83       	std	Y+3, r25	; 0x03
    3450:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3452:	19 82       	std	Y+1, r1	; 0x01
    3454:	0e c0       	rjmp	.+28     	; 0x3472 <LCD_displayString+0x30>
	while (str[i]!='\0'){
		LCD_sendCharacter(str[i]);
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	9b 81       	ldd	r25, Y+3	; 0x03
    3460:	fc 01       	movw	r30, r24
    3462:	e2 0f       	add	r30, r18
    3464:	f3 1f       	adc	r31, r19
    3466:	80 81       	ld	r24, Z
    3468:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCD_sendCharacter>
		i++;
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	8f 5f       	subi	r24, 0xFF	; 255
    3470:	89 83       	std	Y+1, r24	; 0x01
/*description :
 * write a string as an array of characters
 */
void LCD_displayString(const char*str){
	uint8 i=0;
	while (str[i]!='\0'){
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	28 2f       	mov	r18, r24
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	9b 81       	ldd	r25, Y+3	; 0x03
    347c:	fc 01       	movw	r30, r24
    347e:	e2 0f       	add	r30, r18
    3480:	f3 1f       	adc	r31, r19
    3482:	80 81       	ld	r24, Z
    3484:	88 23       	and	r24, r24
    3486:	39 f7       	brne	.-50     	; 0x3456 <LCD_displayString+0x14>
		LCD_sendCharacter(str[i]);
		i++;
	}
}
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <LCD_moveCursor>:

/*description:
 * we have command that take the address of the place you want to place the cursor in
and setting the 9th bit  */
void LCD_moveCursor(uint8 row ,uint8 col){
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	00 d0       	rcall	.+0      	; 0x349a <LCD_moveCursor+0x6>
    349a:	00 d0       	rcall	.+0      	; 0x349c <LCD_moveCursor+0x8>
    349c:	0f 92       	push	r0
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	8a 83       	std	Y+2, r24	; 0x02
    34a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 adress ;
	switch (row){
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	3d 83       	std	Y+5, r19	; 0x05
    34ae:	2c 83       	std	Y+4, r18	; 0x04
    34b0:	8c 81       	ldd	r24, Y+4	; 0x04
    34b2:	9d 81       	ldd	r25, Y+5	; 0x05
    34b4:	81 30       	cpi	r24, 0x01	; 1
    34b6:	91 05       	cpc	r25, r1
    34b8:	c1 f0       	breq	.+48     	; 0x34ea <LCD_moveCursor+0x56>
    34ba:	2c 81       	ldd	r18, Y+4	; 0x04
    34bc:	3d 81       	ldd	r19, Y+5	; 0x05
    34be:	22 30       	cpi	r18, 0x02	; 2
    34c0:	31 05       	cpc	r19, r1
    34c2:	2c f4       	brge	.+10     	; 0x34ce <LCD_moveCursor+0x3a>
    34c4:	8c 81       	ldd	r24, Y+4	; 0x04
    34c6:	9d 81       	ldd	r25, Y+5	; 0x05
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	61 f0       	breq	.+24     	; 0x34e4 <LCD_moveCursor+0x50>
    34cc:	19 c0       	rjmp	.+50     	; 0x3500 <LCD_moveCursor+0x6c>
    34ce:	2c 81       	ldd	r18, Y+4	; 0x04
    34d0:	3d 81       	ldd	r19, Y+5	; 0x05
    34d2:	22 30       	cpi	r18, 0x02	; 2
    34d4:	31 05       	cpc	r19, r1
    34d6:	69 f0       	breq	.+26     	; 0x34f2 <LCD_moveCursor+0x5e>
    34d8:	8c 81       	ldd	r24, Y+4	; 0x04
    34da:	9d 81       	ldd	r25, Y+5	; 0x05
    34dc:	83 30       	cpi	r24, 0x03	; 3
    34de:	91 05       	cpc	r25, r1
    34e0:	61 f0       	breq	.+24     	; 0x34fa <LCD_moveCursor+0x66>
    34e2:	0e c0       	rjmp	.+28     	; 0x3500 <LCD_moveCursor+0x6c>
	case 0:
		adress=col;
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	89 83       	std	Y+1, r24	; 0x01
    34e8:	0b c0       	rjmp	.+22     	; 0x3500 <LCD_moveCursor+0x6c>
		break;
	case 1:
		adress=0X40+col;
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	80 5c       	subi	r24, 0xC0	; 192
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	07 c0       	rjmp	.+14     	; 0x3500 <LCD_moveCursor+0x6c>
		break;
	case 2:
		adress=0X10+col;
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	80 5f       	subi	r24, 0xF0	; 240
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	03 c0       	rjmp	.+6      	; 0x3500 <LCD_moveCursor+0x6c>
		break;
	case 3:
		adress=0X50+col;
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	80 5b       	subi	r24, 0xB0	; 176
    34fe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand((LCD_SET_CURSOR_LOCATION)|adress);
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	80 68       	ori	r24, 0x80	; 128
    3504:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>
}
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <LCD_displayStringRowColumn>:
/*description: display a string in certain row and col */
void LCD_displayStringRowColumn(uint8 row ,uint8 col, const char*str){
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	00 d0       	rcall	.+0      	; 0x351e <LCD_displayStringRowColumn+0x6>
    351e:	00 d0       	rcall	.+0      	; 0x3520 <LCD_displayStringRowColumn+0x8>
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	6a 83       	std	Y+2, r22	; 0x02
    3528:	5c 83       	std	Y+4, r21	; 0x04
    352a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	6a 81       	ldd	r22, Y+2	; 0x02
    3530:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_moveCursor>
	LCD_displayString(str);
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	0e 94 21 1a 	call	0x3442	; 0x3442 <LCD_displayString>
}
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <LCD_clearScreen>:

/*send clear screen command */
void LCD_clearScreen(void){
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	0e 94 21 11 	call	0x2242	; 0x2242 <LCD_sendCommand>
}
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <LCD_integerToString>:

/*description:convert the integer to string in case of accepting an int value from
 * another source ex:sensor  */
void LCD_integerToString(uint16 data ){
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	62 97       	sbiw	r28, 0x12	; 18
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	9a 8b       	std	Y+18, r25	; 0x12
    3574:	89 8b       	std	Y+17, r24	; 0x11
	/*usng int to asci fn itoa which get the asci of each digit in an intger number
	 * and store it in an array of characters
	 */
	uint8 buff[16]; /*the array we store in the asci ,16->digits of int */
	   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3576:	89 89       	ldd	r24, Y+17	; 0x11
    3578:	9a 89       	ldd	r25, Y+18	; 0x12
    357a:	9e 01       	movw	r18, r28
    357c:	2f 5f       	subi	r18, 0xFF	; 255
    357e:	3f 4f       	sbci	r19, 0xFF	; 255
    3580:	b9 01       	movw	r22, r18
    3582:	4a e0       	ldi	r20, 0x0A	; 10
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	0e 94 30 1b 	call	0x3660	; 0x3660 <itoa>
	   LCD_displayString(buff); /* Display the string */
    358a:	ce 01       	movw	r24, r28
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	0e 94 21 1a 	call	0x3442	; 0x3442 <LCD_displayString>
}
    3592:	62 96       	adiw	r28, 0x12	; 18
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <__divmodhi4>:
    35a4:	97 fb       	bst	r25, 7
    35a6:	09 2e       	mov	r0, r25
    35a8:	07 26       	eor	r0, r23
    35aa:	0a d0       	rcall	.+20     	; 0x35c0 <__divmodhi4_neg1>
    35ac:	77 fd       	sbrc	r23, 7
    35ae:	04 d0       	rcall	.+8      	; 0x35b8 <__divmodhi4_neg2>
    35b0:	0c d0       	rcall	.+24     	; 0x35ca <__udivmodhi4>
    35b2:	06 d0       	rcall	.+12     	; 0x35c0 <__divmodhi4_neg1>
    35b4:	00 20       	and	r0, r0
    35b6:	1a f4       	brpl	.+6      	; 0x35be <__divmodhi4_exit>

000035b8 <__divmodhi4_neg2>:
    35b8:	70 95       	com	r23
    35ba:	61 95       	neg	r22
    35bc:	7f 4f       	sbci	r23, 0xFF	; 255

000035be <__divmodhi4_exit>:
    35be:	08 95       	ret

000035c0 <__divmodhi4_neg1>:
    35c0:	f6 f7       	brtc	.-4      	; 0x35be <__divmodhi4_exit>
    35c2:	90 95       	com	r25
    35c4:	81 95       	neg	r24
    35c6:	9f 4f       	sbci	r25, 0xFF	; 255
    35c8:	08 95       	ret

000035ca <__udivmodhi4>:
    35ca:	aa 1b       	sub	r26, r26
    35cc:	bb 1b       	sub	r27, r27
    35ce:	51 e1       	ldi	r21, 0x11	; 17
    35d0:	07 c0       	rjmp	.+14     	; 0x35e0 <__udivmodhi4_ep>

000035d2 <__udivmodhi4_loop>:
    35d2:	aa 1f       	adc	r26, r26
    35d4:	bb 1f       	adc	r27, r27
    35d6:	a6 17       	cp	r26, r22
    35d8:	b7 07       	cpc	r27, r23
    35da:	10 f0       	brcs	.+4      	; 0x35e0 <__udivmodhi4_ep>
    35dc:	a6 1b       	sub	r26, r22
    35de:	b7 0b       	sbc	r27, r23

000035e0 <__udivmodhi4_ep>:
    35e0:	88 1f       	adc	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	5a 95       	dec	r21
    35e6:	a9 f7       	brne	.-22     	; 0x35d2 <__udivmodhi4_loop>
    35e8:	80 95       	com	r24
    35ea:	90 95       	com	r25
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	08 95       	ret

000035f2 <__prologue_saves__>:
    35f2:	2f 92       	push	r2
    35f4:	3f 92       	push	r3
    35f6:	4f 92       	push	r4
    35f8:	5f 92       	push	r5
    35fa:	6f 92       	push	r6
    35fc:	7f 92       	push	r7
    35fe:	8f 92       	push	r8
    3600:	9f 92       	push	r9
    3602:	af 92       	push	r10
    3604:	bf 92       	push	r11
    3606:	cf 92       	push	r12
    3608:	df 92       	push	r13
    360a:	ef 92       	push	r14
    360c:	ff 92       	push	r15
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	ca 1b       	sub	r28, r26
    361c:	db 0b       	sbc	r29, r27
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	09 94       	ijmp

0000362a <__epilogue_restores__>:
    362a:	2a 88       	ldd	r2, Y+18	; 0x12
    362c:	39 88       	ldd	r3, Y+17	; 0x11
    362e:	48 88       	ldd	r4, Y+16	; 0x10
    3630:	5f 84       	ldd	r5, Y+15	; 0x0f
    3632:	6e 84       	ldd	r6, Y+14	; 0x0e
    3634:	7d 84       	ldd	r7, Y+13	; 0x0d
    3636:	8c 84       	ldd	r8, Y+12	; 0x0c
    3638:	9b 84       	ldd	r9, Y+11	; 0x0b
    363a:	aa 84       	ldd	r10, Y+10	; 0x0a
    363c:	b9 84       	ldd	r11, Y+9	; 0x09
    363e:	c8 84       	ldd	r12, Y+8	; 0x08
    3640:	df 80       	ldd	r13, Y+7	; 0x07
    3642:	ee 80       	ldd	r14, Y+6	; 0x06
    3644:	fd 80       	ldd	r15, Y+5	; 0x05
    3646:	0c 81       	ldd	r16, Y+4	; 0x04
    3648:	1b 81       	ldd	r17, Y+3	; 0x03
    364a:	aa 81       	ldd	r26, Y+2	; 0x02
    364c:	b9 81       	ldd	r27, Y+1	; 0x01
    364e:	ce 0f       	add	r28, r30
    3650:	d1 1d       	adc	r29, r1
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	ed 01       	movw	r28, r26
    365e:	08 95       	ret

00003660 <itoa>:
    3660:	fb 01       	movw	r30, r22
    3662:	9f 01       	movw	r18, r30
    3664:	e8 94       	clt
    3666:	42 30       	cpi	r20, 0x02	; 2
    3668:	c4 f0       	brlt	.+48     	; 0x369a <itoa+0x3a>
    366a:	45 32       	cpi	r20, 0x25	; 37
    366c:	b4 f4       	brge	.+44     	; 0x369a <itoa+0x3a>
    366e:	4a 30       	cpi	r20, 0x0A	; 10
    3670:	29 f4       	brne	.+10     	; 0x367c <itoa+0x1c>
    3672:	97 fb       	bst	r25, 7
    3674:	1e f4       	brtc	.+6      	; 0x367c <itoa+0x1c>
    3676:	90 95       	com	r25
    3678:	81 95       	neg	r24
    367a:	9f 4f       	sbci	r25, 0xFF	; 255
    367c:	64 2f       	mov	r22, r20
    367e:	77 27       	eor	r23, r23
    3680:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__udivmodhi4>
    3684:	80 5d       	subi	r24, 0xD0	; 208
    3686:	8a 33       	cpi	r24, 0x3A	; 58
    3688:	0c f0       	brlt	.+2      	; 0x368c <itoa+0x2c>
    368a:	89 5d       	subi	r24, 0xD9	; 217
    368c:	81 93       	st	Z+, r24
    368e:	cb 01       	movw	r24, r22
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	a1 f7       	brne	.-24     	; 0x367c <itoa+0x1c>
    3694:	16 f4       	brtc	.+4      	; 0x369a <itoa+0x3a>
    3696:	5d e2       	ldi	r21, 0x2D	; 45
    3698:	51 93       	st	Z+, r21
    369a:	10 82       	st	Z, r1
    369c:	c9 01       	movw	r24, r18
    369e:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <strrev>

000036a2 <strrev>:
    36a2:	dc 01       	movw	r26, r24
    36a4:	fc 01       	movw	r30, r24
    36a6:	67 2f       	mov	r22, r23
    36a8:	71 91       	ld	r23, Z+
    36aa:	77 23       	and	r23, r23
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <strrev+0x4>
    36ae:	32 97       	sbiw	r30, 0x02	; 2
    36b0:	04 c0       	rjmp	.+8      	; 0x36ba <strrev+0x18>
    36b2:	7c 91       	ld	r23, X
    36b4:	6d 93       	st	X+, r22
    36b6:	70 83       	st	Z, r23
    36b8:	62 91       	ld	r22, -Z
    36ba:	ae 17       	cp	r26, r30
    36bc:	bf 07       	cpc	r27, r31
    36be:	c8 f3       	brcs	.-14     	; 0x36b2 <strrev+0x10>
    36c0:	08 95       	ret

000036c2 <_exit>:
    36c2:	f8 94       	cli

000036c4 <__stop_program>:
    36c4:	ff cf       	rjmp	.-2      	; 0x36c4 <__stop_program>
